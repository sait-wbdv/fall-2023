import { e as error } from "../../../../../chunks/index.js";
const __vite_glob_0_0 = '\n## API Security\n### Authentication vs Authorization \n\n---\n\n## Terminology \n<dl>\n  <dt>Authentication (tokens)</dt>\n  <dd>The process of verifying who a user is.</dd>\n  <dt>Authorization (access tokens, keys)</dt>\n  <dd>The process of verifying what an application has access to.</dd>\n</dl>\n\n---\n\n### Real-world example\nWhen you go through security in an airport:\n1. You show your ID to <strong>Authenticate</strong> your identity. \n2. Then, when you arrive at the gate, you present your boarding pass to the flight attendant, so they can <strong>Authorize</strong> you to board your flight.\n\nSource: <a href="https://auth0.com/docs/get-started/authentication-and-authorization" target="_blank">Authentication vs. Authorization</a> on Auth0\n\n---\n\n### API Keys\n- Is an **Authorization** scheme that does _not_ **Authenticate** the user.\n- Identify the application making the request and can be revoked.\n- Are considered public and are inherently insecure because they are often shown in the URL as a Query Parameter (and therefore can\'t be encrypted).\n\n<p class="code">example.com/api/invoices?<strong>token=sdafnDuTD83</strong></p>\n\n\n---\n\n### Third-party APIs\nThe general process for creating a key:\n1. Login to the service portal.\n2. Find/generate your API key. This is usually under Settings or similar.\n3. Copy your API key into your application.\n4. Follow the instructions provided by the service to test your API key.\n\n---\n\n### Supabase API Key Location\n![Screencap of API section](/images/db/supabase-api-keys.png)\n\n---\n\n## Environment Variables\nEnvironment variables allow storing sensitive information such as API keys, database credentials, and other information that should not be stored in the codebase.\n\n---\n\n<h3>Setting up your <code style="font-variant: initial">.env</code> file</h3>\n\n1. Create a `.env` file in the root of your project\n2. Add your key/value pairs. These will be specific to the application you\'re building:\n    \n```\nPUBLIC_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im92c3R1ZHVtZmhya3V1bWdmbnNtIiwicm9sZSI6ImFub24iLCJpYMzksImV4cCI6MTk5NTQzNzkzOX0.JUm1zX5zp1ApFCoEviuZYJooJhfo\nSECRET_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im92c3R1ZHVtZmhya3V1bWdmbnNtIiwicm9sZSI6InN3OTg2MTkzOSwiZXhwIjoxOTk1NDM3OTM5fQ.eiQbWITJ031N73Up6STWeE_hQV6-K8gZoU\n```\n\n---\n\n### Important things to remember\n- By convention, `.env` variable names are uppercase with underscores\n- Variable values are _not_ in quotes\n- **Never** push `.env` files to your remote repos. Make sure `.env` is added to your project `.gitignore` file.\n\n---\n\n## Extra Reading\n- <a href="https://auth0.com/docs/get-started/authentication-and-authorization" target="_blank">Authentication vs. Authorization</a> (Auth0)\n- <a href="https://cloud.google.com/endpoints/docs/openapi/when-why-api-key" target="_blank">Why and when to use API keys</a> (Google Cloud)\n- <a href="https://zapier.com/engineering/apikey-oauth-jwt/" target="_blank">API Keys vs OAuth Tokens vs JSON Web Tokens</a> (Zapier)\n';
const __vite_glob_0_1 = `
# HTTP and REST
## Accessing Online Data 

---

## Request/Response Cycle 
<dl>
  <dt>HTTP Request</dt>
  <dd>A request for a resource from the browser to a server.</dd>
  <dt>HTTP Response</dt>
  <dd>A response from a server to the browser containing either a requested resource or the result of an operation.</dd>
</dl>

---

## Example Request/Response
1. The browser makes a GET Request for a URL.
2. The server receives the Request and finds the Resource such as a file, image or data.
3. The server sends the Resource back as a Response.
4. The browser receives the Response and might:
    - display a page/image/etc, OR;
    - load JSON data with Javascript.

---

## Anatomy of a URL
See: <a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL" target="_blank">What is a URL?</a>
    
---

### Protocol
<p class="code"><strong>https://</strong>example.com/users?name=tony</p>

### Domain
<p class="code">https://<strong>example.com</strong>/users?name=tony</p>

### Path (Endpoint)
<p class="code">https://example.com<strong>/users</strong>?name=tony</p>

### Query Parameter
<p class="code">https://example.com/users<strong>?name=tony</strong></p>

---

## REST APIs
A standard method of using HTTP to transfer data and/or perform actions between a browser and a server.

---

## HTTP Terminology
<dl>
  <dt>Resource</dt>
  <dd>The target of a Request, such as an HTML document, JSON data, image, etc.</dd>
  <dt>Method</dt>
  <dd>A CRUD operation performed on a resource: 
    <ul>
      <li>POST (Create)</li>
      <li>GET (Read)</li>
      <li>PUT (Update)</li>
      <li>DELETE (Delete)</li>
    </ul>
  </dd>
</dl>

---

### REST Terminology
<dl>
  <dt>Endpoint</dt>
  <dd>A fancy name for a URL Path.</dd>
  <dt>Route</dt>
  <dd>An HTTP Method paired with an Endpoint.</dd>
  <dt>Path Segment</dt>
  <dd>The bits of text located between the slashes (<code>/</code>) in a URL Path: <span class="code">/<strong>path</strong>/<strong>to</strong>/<strong>file</strong></span></dd>
  <dt>Route Parameter</dt>
  <dd>A variable passed as a Path Segment in a URL.</dd>
</dl>

---

### HTTP Request Methods
Each request made to the server has a method attached to it. There are four common methods we use in web development

1. **GET**: Retrieves data from server.
2. **POST**: Submits data to the server.
3. **PUT**: Updates the data that is already within the server.
4. **DELETE**: Deletes the data that is already within the server.

Source: [HTTP Basics](https://medium.com/nerd-for-tech/http-basics-d86fbf8107ec)

---

### Route Examples (GET)
Reading Static Files
<ul class="code no-bullet">
  <li>GET /about-us/index.html</li>
  <li>GET /css/main.css</li>
  <li>GET /images/logo.png</li>
</ul>

List of articles (JSON data)
<ul class="code no-bullet">
  <li>GET /api/articles</li>
</ul>

Single article (JSON data)
<ul class="code no-bullet">
  <li>GET /api/articles/some-title</li>
</ul>

---

### Other Route Examples
Create a new article:
<ul class="code no-bullet">
  <li>POST /api/articles</li>
</ul>

Update a single article:
<ul class="code no-bullet">
  <li>PUT /api/articles/some-title</li>
</ul>

Delete a single article:
<ul class="code no-bullet">
  <li>DELETE /api/articles/some-title</li>
</ul>

---

### API Design & Documentation
Route Parameters
<ul class="code no-bullet">
  <li>GET /api/users/<strong>:id</strong></li>
  <li>PUT /api/users/<strong>:id</strong></li>
  <li>GET /api/articles/<strong>:slug</strong></li>
  <li>PUT /api/articles/<strong>:slug</strong></li>
</ul>

Sorting
<ul class="code no-bullet">
  <li>GET /api/articles<strong>?sort=desc</strong></li>
</ul>

Pagination
<ul class="code no-bullet">
  <li>GET /api/articles<strong>?page=2&per_page=10</strong></li>
</ul>

---

## HTTP Status Codes
Each response from the server has a status code to inform us about how the request went.

Source: [HTTP Basics](https://medium.com/nerd-for-tech/http-basics-d86fbf8107ec)

---

### Status codes groups

**1xx**: The request is received and being processed right now.

**2xx**: The request is successfully received, understood and accepted.

**3xx**: Further action such as authorization or input must be taken or that it's redirecting to another route.

**4xx**: The request was somehow wrong or missing something.

**5xx**: The request was healthy but the server failed at giving the proper response.

---

## Common Status Codes

**200**: OK

**201**: OK created (Something new is created)

**301**: Moved to a New URL

**304**: Not Modified (Cached Version)

**400**: Bad Request

**401**: Unauthorized

**404**: Not Found

**500**: Internal Server Error

---

## Further Reading
- [CRUD vs REST Guide: Operations Simplified 101](https://hevodata.com/learn/crud-vs-rest/)
- [HTTP Basics](https://medium.com/nerd-for-tech/http-basics-d86fbf8107ec)
- Video: [What is a REST API?](https://www.youtube.com/watch?v=lsMQRaeKNDk)
`;
const __vite_glob_0_2 = "\n# Relational Databases and SQL\n\n---\n\n## Terminology\n<dl>\n  <dt>Relational Database</dt>\n  <dd>Data organized into one or more tables of columns and rows, with a unique key identifying each row.</dd>\n  <dt>Relation</dt>\n  <dd>A relationship between two columns in one or more tables. Relations can be one-to-one, one-to-many or many-to-many.</dd>\n  <dt>SQL</dt>\n  <dd>Structured query language (SQL) is a standard language for database creation and manipulation.</dd>\n</dl>\n\n---\n\n## Relational Databases\n### Fancy Google Sheets\n\n---\n\n### Sheet names &rarr; Entities (tables)\n![Sheet names are entities](/images/db/table-names.png)\n\nEntities (table names) are the nouns that are described by the columns in a table.\n\n---\n\n### Columns &rarr; Attributes\n![Google Sheet column](/images/db/columns.png)\n\nAttributes describe the individual aspects of a particular Entity and are usually just called columns.\n\n---\n\n### Rows &rarr; Records\n![Google Sheet row](/images/db/rows.png)\n\nRecords are the actual data that are described by the data in each column. These are often called rows.\n\n---\n\n### Cell Format &rarr; Data Type\n![Google Sheet cell format menu](/images/db/data-types.png)\n\nEvery column has a data type defined when it's created.\n\n---\n\n## Naming conventions\nTable and Column names should:\n- be lowercase\n- use underscores instead of spaces\n- be singular instead of plural\n- not begin with a number\n\n---\n\n## Constraints\n### Added for data integrity\n\n---\n\n### Primary Key\n![id column in a Google Sheet](/images/db/primary-key.png)\n\n**Primary keys** uniquely identify each Record in a Table. By convention, the primary key of a table is named **`id`**.\n\n---\n\n### Compound Primary Key\n![Two id columns in a table](/images/db/compound-primary-key.png)\n\nA **Compound Primary Key** uniquely defines a table row with a combination of two primary/foreign keys.\n\nBy convention, these tables are named by the two joining table names, separated by an underscore.\n\n---\n\n### Foreign Key\n![Google Sheet columns containing other table ids](/images/db/foreign-key.png)\n\n**Foreign keys** create a column relationship between two tables. \n\nBy convention, column names with foreign key relationships end in **`_id`**.\n\n---\n\n### Check Constraints\nWhen a column has a limited range of allowed values.\n\n### Not NULL\nWhen a column cannot be empty.\n\n### Unique\nWhen each value in a table column must be unique.\n\n### Default\nWhen a default column value is defined if one is not provided when a row is created or updated.\n\n---\n\n## Relations\n### Types of Foreign Key Relationships\n\n---\n\n\n### One-to-Many\n![one-to-one diagram](/images/db/one-to-many.png)\n\n_Entity A_ belongs to one _Entity B_ but _Entity B_ can belong to many _Entity A_.\n\n**Example**: A country can have many cities but a city can only be in one country.\n\n---\n\n### Many-to-Many\n![one-to-one diagram](/images/db/many-to-many.png)\n\n_Entity A_ belongs to many _Entity B_ and vice versa.\n\n**Example**: A movie can have many actors and an actor can be in many movies.\n\n---\n\n### One-to-one (rare)\n![one-to-one diagram](/images/db/one-to-one.png)\n\nOne-to-one relationships are rare but are sometimes used in more advanced \"super/subtype\" data model architectures.\n\n---\n\n## SQL\n### Structured Query Language\n\n---\n\n### Common SQL Commands\nThe most common SQL statements follow traditional CRUD Operations:\n\nCreate &rarr; `INSERT`\n\nRetrieve &rarr; `SELECT`\n\nUpdate &rarr; `UPDATE`\n\nDelete &rarr; `DELETE`\n\n---\n\n### Create &rarr; `INSERT INTO`\nInsert data into all columns of a table:\n```sql\nINSERT INTO \n  table_name\nVALUES \n  (value1, value2, value3, ...); \n```\n\n### Example\nInsert data into specific columns of a table:\n```sql\nINSERT INTO \n  table_name (column1, column2, column3, ...)\nVALUES \n  (value1, value2, value3, ...);  \n```\n\n---\n\n### Retrieve &rarr; `SELECT`\nSelect specific columns from all rows from a table:\n```sql\nSELECT \n  column1, column2, ...\nFROM \n  table_name; \n```\n\n### Examples\n\nSELECT first_name, last_name FROM customer\n```sql\nSELECT first_name, last_name FROM customer;\n```\n\nSELECT all columns FROM customer with `*`:\n```sql\nSELECT * FROM customer;\n```\n\n---\n\n### `SELECT` with `WHERE`\nSelect from specific rows with WHERE\n```sql\nSELECT \n  column1, column2, ...\nFROM \n  table_name \nWHERE\n  condition;\n```\n\n### Example\nFind all fields for anyone with a last name of 'Packe':\n```sql\nSELECT * FROM customer WHERE last_name = 'Packe';\n```\n---\n\n### `SELECT` with `ORDER BY`\nOrder the rows returned with ORDER BY:\n```sql\nSELECT \n  column1, column2, ...\nFROM \n  table_name \nWHERE\n  condition;\nORDER BY\n  column1, column2 ASC|DESC\n```\n\n### Example\nFind all customers by last name, starting at Z:\n```sql\nSELECT id, first_name, last_name FROM customer ORDER BY last_name DESC\n```\n\n---\n\n### Update &rarr; `UPDATE`\nUpdate a row using `SET` and `WHERE`:\n```sql\nUPDATE \n  table_name\nSET \n  column1 = value1, column2 = value2, ...\nWHERE \n  condition; \n```\n\n### Example\nUpdate the last name of customer `4` to \"Marcias\":\n```sql\nUPDATE customer SET last_name = 'Marcias' WHERE id = '4' \n```\n\n---\n\n### Delete &rarr; `DELETE`\nDelete rows with `WHERE` (we rarely delete rows in production):\n```sql\nDELETE FROM \n  table_name \nWHERE \n  condition; \n```\n\n### Example\nDelete all records that total more than 1000 (then get fired):\n\n```sql\nDELETE FROM rental_invoice WHERE total_amount_payable > 1000; \n```\n\n---\n\n## Further Reading\n- [Summary - Relational Database Model](https://dev.to/lmolivera/everything-you-need-to-know-about-relational-databases-3ejl)\n<br>\n<br>\n\n### Videos\n- IBM Technology: [What is a Relational Database?](https://www.youtube.com/watch?v=OqjJjpjDRLc)\n- Free Code Camp: [SQL Tutorial - Full Database Course for Beginners](https://www.youtube.com/watch?v=HXV3zeQKqGY)\n    - [2:36] - [What is a Database?](https://www.youtube.com/watch?v=HXV3zeQKqGY&t=156s)\n    - [23:10] - [Tables & Keys](https://www.youtube.com/watch?v=HXV3zeQKqGY&t=1390s)\n    - [43:31] - [SQL Basics](https://www.youtube.com/watch?v=HXV3zeQKqGY&t=2611s)\n";
const __vite_glob_0_3 = "\n# Content Management\n## is Client Management \n\n---\n\n## Side-gigs\n### Assumptions\n- New website (could be a redesign);\n- Client is responsible for content;\n- Client wants to edit their own content after launch.\n\n---\n\n### A typical contract project\n1. First-contact with the potential client;\n2. Pitch and proposal;\n3. Close the contract;\n4. Website developed with placeholder content;\n5. Client takes forever getting you real content;\n6. When it finally arrives, it breaks the design;\n7. Fix and repeat, slowly.\n\n---\n\n## End goals for course\n1. Make it as easy as possible for the client to add content;\n2. Create content and endpoints to be used in the second half of CPNT 262\n3. Optional: Begin building your Final Project for CPNT 265.\n\n---\n\n## First contact\nWays that you might meet a potential client:\n- Word of mouth\n- Family member\n- Cold call\n- Pretend\n- etc\n\n---\n\n## Content Management with Strapi\n1. Create a new Strapi project;\n2. Design content types;\n3. Create user for client;\n4. Train client for content entry;\n5. Begin design and development around real content via REST API (CPNT 262)! \n\n---\n\n## CPNT 200 Assessment Overview\n1. **Client site profile**: find and anyalyze a client category that you will use for your Strapi project;\n2. **Deploy a Strapi project**: Define Content Types for entering content for achievements;\n3. **Content Achievements**: Create content that a client would be responsible for in a real project;\n4. Documentation and polish: Create project documentation and finishing touches that you would hand over to a client.\n\n---\n\n## Further resources\n\n";
const __vite_glob_0_4 = "\n# Strapi Content Builder\n## Content-types and Fields\n\n---\n\n## What is a Headless CMS?\nA content management system that:\n- does not have a front end;\n- generally exposes data via either a REST API or GraphQL;\n- can be used with any frontend, such as vanilla JS, ReactJS, Angular and VueJS.\n\n---\n\n### Database Terminology\n<dl>\n  <dt>Schema (aka: data model)</dt>\n  <dd>The “blueprint” of a database which describes how the data may relate to data.</dd>\n  <dt>Entity (aka: db table)</dt>\n  <dd>A real-world thing or a real-world object.</dd>\n  <dt>Attribute (aka: db table column/field)</dt>\n  <dd>A definition of a characteristic property of an entity.</dd>\n  <dt>Relationship (aka: db join)</dt>\n  <dd>A connection between two entities; either one-to-one, one-to-many or many-to-many.</dd>\n</dl>              \n\n---\n\n## DB terms vs Strapi terms\n\n**Schema** --> **Model**\n\n**Entity** --> **Content-type**\n\n**Attribute** --> **Field**\n\n**Relationship** --> **Relation field**\n\n---\n\n## Categories of Strapi Types\n<dl>\n  <dt>Collection type</dt>\n  <dd>Content-types that can manage several entries.</dd>\n  <dt>Single type</dt>\n  <dd>Content-types that can only manage one entry.</dd>\n  <dt>Components</dt>\n  <dd>A re-usable group of types/fields that can be used in multiple collection types and single types.</dd>\n</dl>\n\n---\n\n### Regular (boring) content fields\nMany of the regular types are straight forward:\n- **Text**: Can be short (i.e. titles) or long (i.e. descriptions)\n- **Rich Text**: for long format markdown content\n- **Number**: for quantities, price, etc\n- **Boolean**: for flags and checkboxes\n- **Email**: for uhm, email addresses\n- **Password**: an encrypted field\n- **Enumeration**: for dropdown menus\n- **Media**: For example, images\n- **JSON**: For javascript objects\n\nSee: [Strapi Documentation](https://docs.strapi.io/user-docs/latest/content-types-builder/configuring-fields-content-type.html#regular-fields)\n\n---\n\n### Relation fields\nUsed for connecting one Content-type to another.\n\n![Illustrations for major relationships](/images/cms/strapi-relations.png)\n\nSee: [Understanding and using Relations in Strapi](https://strapi.io/blog/understanding-and-using-relations-in-strapi)\n\n---\n\n## One-to-one (rare)\nContent-type A has and belongs to one Content-type B\n\n![Illustration for one-to-one relationships](/images/cms/one-to-one.png)\n\n**Example**: A person has a unique ID card.\n\n---\n\n## One-to-many\nContent-type A belongs to many Content-type B\n\n![Illustration for one-to-one relationships](/images/cms/one-to-many.png)\n\n**Example**: A country can have many cities but a city can only be in one country.\n\n---\n\n## Many-to-many\nContent-type A has and belongs to many Content-type B\n\n![Illustration for one-to-one relationships](/images/cms/many-to-many.png)\n\n**Example**: A movie can have many actors and an actor can be in many movies.\n\n---\n\n## One way (rare)\nContent-type A has one Content-type B BUT Content-type B is not linked back to A (uni-directional)\n\nUsed for performance in large databases.\n\n---\n\n## Many way (rare)\nContent-type A has many Content-type B BUT Content-type B is not linked back to B (uni-directional). \n\nUsed for performance in large databases.\n\n---\n\n## Components\nUsed for grouping commonly used sets of fields that are used in multiple Content-types.\n\n- Components can be _repeatable_ if a Content-type needs more than one of them.\n\n**Example**: a hypertext link is the classic component this groups a link text field with a URL text field. This component can then be used throughout the Content-type Builder.\n\n---\n\n## Further resources\n- [User Guide](https://docs.strapi.io/user-docs/latest/getting-started/introduction.html)\n- [Developer Documentation](https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html)\n";
const __vite_glob_0_5 = "\n# Deploying Strapi\n## On render.com\n\n---\n\n## Terminology\n<dl>\n  <dt>Deploy</dt>\n  <dd>Making a project publicly available on a server.</dd>\n  <dt>Managed Host</dt>\n  <dd>AKA, cloud provider. A server provider that handles all the details of deployment. In other words, we just have to click a few buttons in an admin panel to make a project live.</dd>\n</dl>\n\n---\n\n## General steps\n1. Sign up to your chosen cloud host (duh);\n    - Today we will be deploying to [`render.com`](https://render.com)\n2. Connect your GitHub account to your Cloud Host account;\n3. Use the Host admin panel to deploy your Strapi repo (this takes awhile);\n4. Set your **Environment Variables** in your Host admin panel;\n5. Sign into your Strapi project and import your data.\n\n---\n\n## Environment Variables\nYour `.env` file stores local environment information that Strapi (and most server software) needs to run.\n- Your `.env` file should never be included in your repo (it's listed in the default Strapi `.gitignore` file);\n- This files allows you to customize your local environment:\n    - Example: you can run your server on port 1338 on your machine but 1337 everywhere else;\n- When you deploy to [render.com](https://render.com/), you will need to enter the same `.env` variables in the admin panel for everything to work.\n\n---\n\n## Pre-requisites\nBefore you begin deploying to [render.com](https://render.com/), you should have the following prepared:\n- A free [render.com](https://render.com/) account;\n- Install the [Import Export Entries](https://market.strapi.io/plugins/strapi-plugin-import-export-entries) plugin for Strapi;\n    ```\n    $ npm install strapi-plugin-import-export-entries\n    ```\n    - `$ npm run build` to enable the plugin\n        - You may have to follow the full instructions on the Plugin home page to enable the plugin?\n    - Export your local Entries into a JSON file;\n- A GitHub repo containing your (working) Strapi project;\n\n---\n\n## Deploying to [render.com](https://render.com/)\n\n---\n\n### Step 1: Create a Web Service\nConnect your Strapi GitHub repo OR paste the URL of your repo if it's public.\n\n---\n\n### Step 2: Project settings\nIf the field is not listed here, use the default value:\n- **Name**: A unique name for the project. This will become the subdomain of your project URL.\n- **Root directory**: Leave blank;\n- **Build Command**: \n    ```\n    $ npm install && npm run build\n    ```\n- **Start Command**:\n    ```\n    $ npm run start\n    ```\n\n---\n\n### Step 3: Environment Variables\nYou will need to add all the `.env` variables in your project to your Web Service:\n1. Go to the **Environment** section;\n2. Click **Add Environment Variables** to add each variable listed in your `.env` file:\n    ```\n    HOST=0.0.0.0\n    PORT=1337\n    APP_KEYS=[key1],[key2],[key3],[key4]\n    API_TOKEN_SALT=[token-salt]\n    ADMIN_JWT_SECRET=[admin-jwt-secret]\n    JWT_SECRET=[jwt-secret]\n    ```\n    - Replace the [values] with the actual values listed in your project `.env` file.\n\n---\n\n### Step 4: Deploy\n[render.com](https://render.com/) will automatically deploy whenever you change your settings or push new code to your repo.\n1. Go to **Events** to see the status of your deployment;\n    - This may take awhile...\n2. If there's an error: click on **deploy** to view the logs and troubleshoot;\n    - double-check that your project works locally;\n    - confirm your service settings and environment variables;\n3. If the deploy succeeds, go to your Strapi admin for the next step.\n\n---\n\n### Step 5: Import Entries\nYour repo will contain your Content-types but not your Super-user and your content Entries:\n1. Re-create your Super-user admin account;\n2. Go to the Content Manager;\n3. Import your Entries using the file you Exported from your local project;\n4. Done!\n\nThere is also an Import function in the Import/Export Entries section under the Content-type Builder but it doesn't seem to work.\n\n---\n\n## Step 6: API Token\nYou will also need to [re-add your API Token](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/configurations/optional/api-tokens.html) to make API requests on the live server. **This will be a different token than your local one**.\n\n---\n\n## Further resources\n- [Deploy Strapi Docs on render.com](https://render.com/docs/deploy-strapi)\n\n";
const __vite_glob_0_6 = "\n# Supabase with SvelteKit\n## Getting Started\n\n---\n\n## First-time Setup\n1. [Create Supabase account](https://app.supabase.com/sign-up)\n    - Supabase will create your database for you.\n    - Use a strong password for your database password and store it in a safe place. Don't lose it!\n2. Add your Instructor as a Team Administrator (click on Org at the top of the page)\n    ![Teams page](/images/db/supabase-team.png)\n\n\n---\n\n### Tutorial\n## [Use Supabase with SvelteKit](https://supabase.com/docs/guides/getting-started/quickstarts/sveltekit)\n\nComplete this tutorial to connect your first SvelteKit page to your database. The above steps have been duplicated here, with some changes for your `.env` file.\n\n---\n\n### Step 1: Set up a Supabase project with sample data\n1. [Create a new project](https://app.supabase.com/) in the Supabase Dashboard.\n\n2. After your project is ready, create a table in your Supabase database using the [SQL Editor](https://app.supabase.com/project/_/sql) in the Dashboard. Use the following SQL statement to create a countries table with some sample data.\n\n```sql\n-- Create the table\nCREATE TABLE countries (\nid SERIAL PRIMARY KEY,\nname VARCHAR(255) NOT NULL\n);\n-- Insert some sample data into the table\nINSERT INTO countries (name) VALUES ('United States');\nINSERT INTO countries (name) VALUES ('Canada');\nINSERT INTO countries (name) VALUES ('Mexico');\n```\n---\n\n### Step2: Create a SvelteKit app\n\nCreate a SvelteKit app using the `npm create` command or you can use a project you've already set up.\n\n```bash\n$ npm create svelte@latest hello-supabase\n```\n\n---\n\n### Step 3: Install the Supabase client library\nThe fastest way to get started is to use the `supabase-js` client library which provides a convenient interface for working with Supabase from a SvelteKit app.\n\nNavigate to the SvelteKit app and install `supabase-js`.\n\n```bash\n$ npm install @supabase/supabase-js\n```\n\n---\n\n### Step 4a: Add public API (anon) key to your `.env`\nCreate an `.env` file (if you don't already have one) in the root of your project and add your public API (anon) key as `SUPABASE_KEY`.\n  \n```\nSUPABASE_KEY=<anon key here>\n```\n\n---\n\n### Step 4b: Create the Supabase client\nCreate a `/src/lib` directory in your SvelteKit app, create a file called `supabaseClient.js` and add the following code to initialize the Supabase client with your project URL and public API (anon) key.\n\n```js\nimport { createClient } from '@supabase/supabase-js';\nimport { SUPABASE_KEY } from '$env/static/private';\n\nexport const supabase = createClient('https://<project>.supabase.co', SUPABASE_KEY);\n\n```\n- Replace `<project>` in the connection URL with the id of your project.\n\n---\n\n### Step 5a: Create `+page.server.js`\nUse `load` method to fetch the data server-side and display the query results as a simple list.\n\nCreate `+page.server.js` file in the `routes` directory with the following code.\n\n```js\nimport { supabase } from \"$lib/supabaseClient\";\n\nexport async function load() {\n  const { data } = await supabase.from(\"countries\").select();\n  return {\n    countries: data ?? [],\n  };\n}\n\n```\n\n---\n\n### Step 5b: Create `+page.svelte` page\nCreate or modify a `+page.svelte` file in the `routes` directory with the following code.\n\n```html\n<script>\n  export let data;\n  let { countries } = data;\n<\/script>\n\n<ul>\n  {#each countries as country}\n    <li>{country.name}</li>\n  {/each}\n</ul>\n```\n\n---\n\n### Step 6: Start the app\nReplace the existing content in your +page.svelte file in the routes directory with the following code.\n\n```bash\n$ npm run dev\n```\n\n---\n\n## Further Learning\n**Supabase Auth Deep Dive**\n- [Part One: JWTs](https://supabase.com/docs/learn/auth-deep-dive/auth-deep-dive-jwts)\n- [Part Two: Row Level Security](https://supabase.com/docs/learn/auth-deep-dive/auth-row-level-security)\n- [Part Three: Policies](https://supabase.com/docs/learn/auth-deep-dive/auth-policies)\n- [Part Four: GoTrue](https://supabase.com/docs/learn/auth-deep-dive/auth-gotrue)\n- [Part Five: Google Oauth](https://supabase.com/docs/learn/auth-deep-dive/auth-google-oauth)\n**Intermediate/Advanced Tutorials**\n- [Build a User Management App with SvelteKit](https://supabase.com/docs/guides/getting-started/tutorials/with-sveltekit)\n    - This tutorial uses Typescript\n- [Supabase OAuth with SvelteKit (Discord, Google, GitHub)](https://www.youtube.com/watch?v=KfezTtt2GsA)\n\n";
const __vite_glob_0_7 = "\n# Loading Data\n## in SvelteKit\n\n---\n\n## Loading Data in SvelteKit\nA **`+page.svelte`** file can have sibling pages that can load data for your page.\n<dl>\n  <dt><code>+page.js</code></dt>\n  <dd>JS that can run on the server <em>and</em> browser. Used for fetching from third-party APIs.</dd>\n  <dt>+page.server.js</dt>\n  <dd>JS that <em>only</em> runs on the server. Used when connecting to a database or hiding credentials.</dd>\n</dl>\n\n\n---\n\n\n`+page.js` (or `+page.ts`) exports a `load` function, \n\n```js\n// src/routes/blog/[slug]/+page.js\n\nexport const load = ({ params }) => {\n  return {\n    post: {\n      title: `Title for ${params.slug} goes here`,\n      content: `Content for ${params.slug} goes here`\n    }\n  };\n}\n```\nThe `return` value is available via the `data` prop:\n```html\n<!-- src/routes/blog/[slug]/+page.svelte -->\n<script>\n  export let data;\n<\/script>\n\n<h1>{data.post.title}</h1>\n<div>{@html data.post.content}</div>\n```\n\n---\n\n### `load` parameters\nThe built-in `load` function can access the following pre-defined parameters describing the request:\n<dl>\n  <dt><code>params</code></dt>\n  <dd>Contains any defined route params.</dd>\n  <dt><code>url</code></dt>\n  <dd>Contains properties like the <code>origin</code>, <code>hostname</code>, <code>pathname</code> and <code>searchParams</code></dd>\n  <dt><code>route</code></dt>\n  <dd>Contains the name of the current route directory, relative to <code>src/routes</code>.</dd>\n</dl>            \n\n---\n\n### Things to remember with `load`\n- It needs to be exported with `export`.\n- Its function parameters need to be surrounded by `{}`.\n- The `return` value must be an object.\n- In `+page.svelte` the returned data is always inside a prop named `data`.\n\n---\n\n## Fetching async data\n<dl>\n  <dt>Single threaded</dt>\n  <dd>One statement is executed at a time. Javascript is single threaded. Many other languages are not.</dd>\n  <dt>Synchronous</dt>\n  <dd>One at a time.</dd>\n  <dt>Asynchronous</dt>\n  <dd>More than one at a time.</dd>\n  <dt>Promise</dt>\n  <dd>An ES6 feature that allows for asynchronous functions.</dd>\n</dl>\n\n---\n\nThe `load` function can also access the `fetch` function but it must be used asynchronously with `async`/`await`:\n\n```js\nexport const load = async ({ fetch }) => {\n\n  const response = await fetch(`https://api.disneyapi.dev/characters`);\n  const characters = await response.json();\n\n  return {\n    characters: characters\n  }\n}\n```\n\n---\n\n### Things to remember with `fetch`\n- `load` must be defined with `async`\n- `fetch` must always be invoked with `await`\n- `response.json()` must always invoked with `await` to convert the JSON to a JS object\n\n---\n\n## Further Learning\n### Reading list\n- Free Code Camp: [Asynchronous Programming in JavaScript – Guide for Beginners](https://www.freecodecamp.org/news/asynchronous-programming-in-javascript/)\n\n### Watch list\n- Codevolution: [Loading page data with +page.js](https://www.youtube.com/watch?v=iBctrIOg-Jw)\n";
const __vite_glob_0_8 = "\n# Git Branches and Pull Requests\n\n---\n## What are Branches and Pull Requests\n- Branches are different verions of the same code\n  - You create a branch off of another branch (main is the main branch)\n  - Then edit code in it, allowing others to push code without conflict\n- Pull Requests are how code moves from one branch to another\n  - Pull Requests give you a space to review changes and comment before merging\n\n---\n## Why Branch?\n\n- Code can break, and often does. This happens more when multiple people work on the same code\n- Using a `dev` branch can protect the code in main\n- This fosters better teamwork and cleaner code\n\n---\n## How to Branch?\n- Run this command in the terminal from within your git repository\n\n```\ngit checkout -b branch-name\n```\n\n---\n# How to change branches\n\n- Run this command in your git repository\n\n```\ngit checkout branch-name\n```\n\n---\n\n## Branching workflow\n\n1. Edit files for a particular feature in your `dev` branch until you're happy with the feature\n\n    - make and push commits as per usual\n\n2. Open a Pull Request in Github\n\n    - This will create a trackable commentable space that documents the changes that you make\n\n3. When your feature is ready, merge to main\n\n---\n\n## Tips\n\n- assign 1-2 code reviewers to check the code in a PR before it is moved to main\n- be very clear of what you're doing in your commits\n- make more small Pull Requests instead of less large pull requests\n- only edit relevant files when working on a feature\n- **communicate with your team**\n\n### Make good quality PRs\n\n- Title and summary should be clear and concise\n- describe your changes well in each commit\n- keep it small\n  - make a pr that focuses on 1 thing. don't make PRs that aim to do lots of different things\n- test your code before submitting a PR\n  - Do not submit broken code\n  - Sometimes when we change too many things, unexpected breaks can occur\n    - before submitting, double check that everything still looks good\n- Lots of information can be found [in this gist](https://gist.github.com/mikepea/863f63d6e37281e329f8)\n";
const __vite_glob_0_9 = '# Better Search Phrases\n## 90% of Web Dev is [Googling]\n![Screencap - Search js function](../assets/images/misc/search-js-function.png)\n\n---\n\n## Terminology\n<dl>\n  <dt>Normie</dt>\n  <dd>Someone whose tastes, lifestyle, habits, and attitude are mainstream in a particular field or topic.</dd>\n  <dt>Expert/Superstar/Hotshot</dt>\n  <dd>Someone who is dazzlingly skilled or knowledgeable in a particular field or topic.</dd>\n  <dt>Jargon</dt>\n  <dd>Special words or expressions that are used by a particular profession or group and are difficult for others to understand.</dd>\n</dl>\n---\n\n## What makes you so special?\n### (Seriously)\nThink of a topic/field/profession in which:\n- you would consider yourself an expert;\n- your classmates would probably consider themselves a "normie";\n- you can dazzle most others with jargon they wouldn\'t understand.\n\nYou will be sharing this topic in a group discussion later.\n\n---\n\n## Why is search important?\n- Your learning will live and die on your ability to find high quality resources;\n- There\'s always a new tool/technology/framework to learn (and also someone to teach it);\n- It\'s rare that a problem hasn\'t already been solved (and shared) by someone else;\n- Devs are lazy and don\'t want to memorize anything.\n\n---\n\n## Why is search difficult?\n- High quality search results require high quality search terms;\n- You won\'t know these terms as a beginner;\n- Resources become outdated quickly.\n\n---\n\n### Quality Searches\nEffective search phrases are usually:\n1. **Concise**: Normally 1-4 words long\n    - _Exception_: Copy/pasting an error\n2. **Domain-specific**: Terms that are used within a specific industry and not in general usage by "normies"\n3. **Qualified**: Qualifying terms further filter the results based on:\n    - the skill level of the searcher\n    - the specific goal of the searcher\n    - a desired source of information\n\n---\n\n## Concise search phrases\n### Less is more\n- The more words you use, the more you dilute meaning;\n- Typing is tedious, do less of it;\n- All you need is that perfect word, but first you need to find it...\n\n---\n\n## More Terminology\n<dl>\n  <dt>Domain-specific Terminology</dt>\n  <dd>A domain-specific term for jaron.</dd>\n  <dt>Search qualifiers</dt>\n  <dd>Terms that help the search engine narrow your results.</dd>\n</dl>\n\n---\n\n## Nerdier terms\n#### (Use with caution)\nFolder &#8594; directory &#8594; project root &#8594; repository &#8594; repo\n\nPhoto &#8594; image &#8594; high-frequency raster image\n\nWeb address &#8594; URL &#8594; Top-level domain &#8594; TLD\n\n---\n\n## Activity: What\'s your jargon?\nIn groups of 3 or 4, and taking turns:\n1. Share an obscure hobby/topic/profession/etc with the group;\n2. For the **normies**: \n    - What terms do you know about the domain?\n3. For the **expert**:\n    - What domain-specific terms you can teach?\n4. Did anyone find a new friend to nerd out with?\n\n---\n\n## Qualifying terms\nA domain-specific term will still return many results that might not be focused enough to solve your problem:\n- Looking for tutorials?\n    ```html\n    node for beginners\n    node getting started\n    node examples\n    ```\n- Use nerdy terms for nerdy results. Are the results different between these terms?\n    ```html\n    css docs\n    css specs\n    ```\n\n---\n\n## Example Searches\nHow would you rate the following search phrases?\n- Were any words specific to the industry of web development? What are they?\n- How many words are used?\n- What is the skill level of the searcher? What problem might they be solving?\n- How would do you identify high quality results?\n\n---\n\n## "`How do I build a web site?`"\n\n---\n\n## "`Why isn\'t my CSS doing anything?`"\n\n---\n\n## "`web development`"\n\n---\n\n## "`html crash course`"\n\n---\n\n## "`js architecture patterns`"\n\n---\n\n## "`[your fave browser] devtools`"\n\n---\n\n## "`most underrated string methods`"\n\n---\n\n## Identifying high quality results\nGood resources:\n- Are current (does the resource have a date?);\n- Provide sample code;\n- Have video chapter markers;\n- Come from a trusted source;\n    - **Pro-tip**: prepend your favourite content creator to find results from that person/site:\n        ```\n        mdn fat arrow\n        ```\n- Are easy to find again. What search term would you use to find a favourite result in the future?\n\n---\n\n### Convergent vs Divergent Searching\n- **Convergent**: \n    - There is probably **one** answer to your problem\n    - Example: \n        - _What\'s the forecast for tomorrow?_\n- **Divergent**: \n    - There could be **many** answers to your problem\n    - You\'re doing general research\n    - Example: \n        - _What\'s an alternative to Netflix?_\n        - _Finding inspiration for a logo design_\n\n---\n\n## Divergent searches\n### with Suggestions\n![Screencap - Search why](../assets/images/misc/search-why.png)\n\n---\n\n## Google (or whatever) Suggestions\n1. Enter a domain-specific term in your search bar but _DON\'T_ hit enter:\n    ```\n    js loop\n    ```\n2. Wait for Google to show completion suggestions\n    ![Example of a Suggestion search](assets/images/searching/divergent-search.png)\n3. Pick a Suggestion to learn something new about that concept.\n\n---\n\n## "Verses" searches\n![Screencap - Search js function](../assets/images/misc/search-vscode-vs.png)\n\n- Add "vs" after a tool, concept, term.\n- Dig deeper by "verses searching" each of the suggested terms\n\n---\n\n### Activities: Divergent searching\n- Use Suggestions to find a new domain-specific term you didn\'t know before;\n- Try "verses" searches to find alternative to a tool you use everyday.\n\n';
const __vite_glob_0_10 = "\n# Git Workflows\n## Collaborating with a Team\n\n---\n\n## Why do we use Git?\n- **Clone 3rd party projects**: Popular projects include [lodash](https://lodash.com/), [TailwindCSS](https://tailwindcss.com/) and [Font Awesome](https://fontawesome.com/).\n- **Code backups**: Rollback to your last `commit` in case you screw up.\n- **Syncing code**: A single dev can sync projects across multiple machines.\n- **Deployment**: `push` project code to a server to make it live (with a little help from GitHub).\n- **Collaboration with teammates**: Teams can coordinate work, review code and manage  conflicts.\n\n---\n\n## Terminology\n<dl>\n  <dt>(Merge) Conflict</dt>\n  <dd>When one (on two machines) or more developers make changes to the same line of code.</dd>\n  <dt>Branch</dt>\n  <dd>An alternate version of your code. Each version lives in the same location in the file system but Git re-writes your files based on what Branch you're in.</dd>\n  <dt>Pull Request</dt>\n  <dd>A fancy-pants GitHub (not Git) feature for reviewing code contributions in large/untrusted teams.</dd>\n</dl>\n\n---\n\n## 3 Collaboration Workflows\n### In order of increasing fanciness\n1. **Not fancy**: The whole team pushes to the `main` branch;\n2. **Kinda fancy**: Each dev commits to their own branch(es);\n3. **Fancy-pants**: Each dev submits Pull Requests.\n\n---\n\n### Workflow 1: Not Fancy\n## Everyone commits to `main`\n1. An Owner creates a team repo;\n2. The Owner adds each team member to the repo as a Collaborator;\n3. All team members push commits directly to the `main` Branch;\n4. The last dev to push resolves any conflicts.\n\n---\n\n### Workflow 2: Kind Fancy\n## Everyone commits to a branch\n1. Steps 1 & 2 from last slide;\n2. Each team member creates a branch for their features:\n    ```\n    $ git checkout -b [feature-name]\n    ```\n3. The dev commits code to their branch until it's to be added to the main branch;\n4. Once the feature is ready, the branch is merged into `main` and conflicts are resolved.\n    ```\n    $ git checkout main\n    $ git merge [feature-name]\n    ```\n\n---\n\n### Workflow 3: Fancy-pants\n## Devs submit Pull Requests\nSee [About Pull Requests](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests) on GitHub\n1. Team members are NOT added as collaborators;\n2. Each dev [forks](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/about-forks) and clones the project repo;\n3. Work is done in a local feature branch on the fork;\n4. Changes are pushed to their fork on GitHub;\n5. A Pull Request is submitted for the Owner to accept after conflicts are resolved.\n";
const __vite_glob_0_11 = '\n# Git and GitHub\n## Code Management and Deployment\n\n---\n\n### What is Git?\n\nGit is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).\n- [from Wikipedia](https://en.wikipedia.org/wiki/Git)\n- See also: [What is Git?](https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F)\n            \n---\n\n### Why do we use it?\n\n- **Clone 3rd party projects**: Popular projects include [lodash](https://lodash.com/), [TailwindCSS](https://tailwindcss.com/) and [Font Awesome](https://fontawesome.com/).\n- **Code backups**: `commit` your code to take a snapshot of a project. You can then rollback in case you screw up.\n- **Syncing code**: If you work on two machines, like a home laptop and office system, you can use Git to sync your projects across your machines.\n- **Collaboration with teammates**: Git allows multiple developers to work on the same file at the same time. Conflicts will happen but Git helps resolve them.\n- **Deployment**: In industry, we use Git to push our project code to a server to make it live.\n\n---\n\n### Terminology\n- **Version Control**: A category of software tools that help a software team manage source code over time.\n- **Repository (aka repo)**: The root directory of a project that Git tracks. \n- **Local Repository**: A repo on your local machine.\n- **Remote Repository**: A repo on another machine or server (such as GitHub).\n- **`commit` changes**: Saving a snapshot of your project.\n- **`add` changes**: An extra step you need to complete before you can commit a change (for safety).\n- **`push` changes**: Send local changes to your remote repo.\n- **`pull` changes**: Retrieve remote changes to your local repo.\n\n---\n\n### How does it work?\nGit keeps track of each line of code in your project, including:\n- who created the line(s) of code;\n- every change made to a line(s) of code;\n- who made each change and when.\n\n---\n\n### How does it work?\n\nA typical sequence of events in a developer\'s day, they:\n1. Will make changes to code on their local repo;\n2. `add` the changes to "staging";\n3. `commit` the changes to save a "snapshot" of the project;\n4. `push` the changes to a Remote Repo (i.e. GitHub) when the changes are ready to be shared or deployed.\n    - You must `pull` any new changes from the Remote Repo before you can `push`. This is when dreaded merge conflicts need to be handled.\n    - At any point during development, you can view the status of your repo to find helpful information of the status of your project\n\n---\n\n### Key Takeaways\nSome things to think about when first learning Git:\n- It\'s very important that you\'re in the correct directory (usually the root of your\nproject) when running Git commands. \n    - Practice your command line skills and always keep in mind which folder you\'re in.\n- Always `add` your changes before you `commit` them.\n- Pay careful attention to error messages in Git. It will often provide helpful hints and commands to help you.\n\n---\n\n### Important\nDon\'t forget to add the `-m "commit message here"` when committing changes. \n\n```\n$ git commit -m "updated About page"\n```\n\nOtherwise, your terminal will open a vim window so you can add the mandatory commit message. It\'s the default command line text editor on most systems and is not the most intuitive application to use. \n- `:q!` will quit without saving so you can try committing again with the `-m` flag.\n- `:wq` will save the file before you quit. This is handy if you\'re merging changes from multiple machines.\n- See this [Vim cheat sheet](https://devhints.io/vim) if you need more commands.\n';
const __vite_glob_0_12 = "\n# Markdown \n\n---\n\n## Markdown basics\n\n- [Basic Syntax Guide](https://www.markdownguide.org/basic-syntax/)\n- Use markdown for formatting:\n  - headings\n  - body text (bold, italics, underline...)\n  - lists (ordered, unordered)\n  - hyperlinks\n  - images\n  - **adding visual hierarchy to a document**\n            \n---\n\n### Collaborative Markdown\n\n- We can write documents together in real time with markdown using tools like [Hackmd](https://hackmd.io)\n  - Hackmd is great because it can push directly to a github repo, it can be shared, edited, and read by many people\n- Sign up on hackmd for some of our activities today\n\n---\n### Collaborative Markdown\n\n- We can write documents together in real time with markdown using tools like [Hackmd](https://hackmd.io)\n- Hackmd is great because it can push directly to a github repo, it can be shared, edited, and read by many people\n- Sign up on hackmd for some of our activities today\n";
const __vite_glob_0_13 = '# `npm` Package Manager \nThe best tools have recursive names\n\n---\n\n## Why do we use `npm`?\n1. **Dependency management**: Keeping track of software versions is hard work. npm makes this easier (but it can still be a pain).\n2. **Development and deployment**: Along with Git, npm is often used to manage code on live servers.\n3. **Project collaboration**: Along with Git, npm is used to make sure team members are all developing with the same software versions.\n\n---\n\n## Terminology\n<dl>\n  <dt>Dependency</dt>\n  <dd>Software that your app needs to function properly. Each dependency will often also have their own dependencies.</dd>\n\n  <dt>Package Management System</dt>\n  <dd>Software that automates the installation and updating of software dependencies.</dd>\n\n  <dt>Semantic versioning</dt>\n  <dd>A three number versioning system (<code>major</code>.<code>minor</code>.<code>patch</code> => <code>2.3.1</code>) for software. </dd>\n</dl>\n\n---\n\n<dl>\n  <dt><code>Node</code></dt>\n  <dd>A framework for running Javascript from the command line or on a server.</dd>\n\n  <dt><code>npm</code></dt>\n  <dd><em>npm Package Manager</em>, previously <em>Node package manager</em> (npm is now used for many software projects besides Node)</dd>\n\n  <dt><code>npm</code> Package</dt>\n  <dd>A package is a file or directory that is described by a <code>package.json</code> file.</dd>\n</dl>\n\n---\n\n## Node in a Nutshell\n- Run a js file from the command line with:\n    ```shell\n    $ node <path-to-js-file>\n    ```\n- Node will not run browser-specific code like `document.querySelector()`\n\n---\n\n## npm Stats and Trivia\nAs of July 2019:\n- Largest software package registry in the world.\n- 1 million indexed packages\n- ~10 billion downloads a week\n- ~45 billion downloads a month\n\n---\n\n## npm Security\n- The registry does not have any vetting process for submission.\n- Packages can be low quality, insecure, or malicious.\n- Registry quality is dependant on user reviews and moderation.\n- See: [Notable Breakages](https://en.wikipedia.org/wiki/Npm_(software)#Notable_breakages) (Wikipedia)\n\n---\n\n## npm Outages\n- The npm registry is not distributed. \n- If the registry goes down, all of npm goes down.\n- See: [npm Status](https://status.npmjs.org/) page for outage history.\n\n---\n\n## Typical npm usage\n1. Initialize a new npm project (or download one).\n    ```shell\n    $ npm init\n    ```\n    Or with defaults:\n    ```shell\n    $ npm init -y\n    ```\n2. Install a software package:\n    ```shell\n    $ npm install <package-name>\n    ```\n    - Some packages are installed as [Development Dependencies](https://www.knowledgehut.com/blog/web-development/npm-install-dev-dependencies)\n\n3. Include the package in your project by following the package\'s documentation.\n\n---\n\n## Example `npm` directory structure\n\n```js\nproject-root\n├── node_modules\n    ├── dependency-1\n    ├── dependency-2\n    └── dependency-3\n├── app.js\n├── package-lock.json\n└── package.json\n```\n\n---\n\n## Important files and directories\n<dl>\n  <dt><code>package.json</code></dt>\n  <dd>Contains all the meta information about an npm project. If this file isn\'t present, it\'s not an npm project.</dd>\n\n  <dt><code>package-lock.json</code></dt>\n  <dd>An auto-generated list of specific packages and versions that your project uses. <strong>Do not edit manually this file.</strong></dd>\n\n  <dt><code>node_modules</code></dt>\n  <dd>The directory that contains the actual software packages. This can get pretty large.</dd>\n</dl>\n\n\n---\n\n## Key Takeaways\n- IF your project won\'t run in the browser, add `node_modules` to your `.gitignore` file. This directory stores all your dependencies (often lots of files) which should not be committed to your repository.\n- Commit `package.json` and `package-lock.json` to your repository (unless you\'re specifically told not to).\n- You no longer need to use the `--save` flag when installing packages.\n\n---\n\n## Example `package.json` file\n\n```json\n{\n  "name": "hello-world",\n  "version": "1.0.0",\n  "description": "",\n  "main": "app.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "dependencies": {}\n  "keywords": [],\n  "author": "",\n  "license": "ISC"\n}\n```\nSee: [Anatomy of a `package.json` file](https://www.digitalocean.com/community/tutorials/nodejs-package-json)\n\n---\n\n## Common Scenarios\n### Evaluating project status\n\n---\n\n## No `package.json file`\n```js\nproject-root\n└── app.js\n```\n\nAn npm project needs to be initialized with:\n```shell\n$ npm init -y\n```\n\nSee: [npm - Initialize a new project](https://gist.github.com/acidtone/f2e901fb4b04bd41aa59755e2de9af4f)\n\n---\n\n## No `package-lock.json` and `node_modules`\n```js\nproject-root\n├── app.js\n└── package.json\n```\n\nSoftware dependencies need to be downloaded:\n\n```shell\n$ npm install\n```\n\nOr install a specific package:\n```shell\n$ npm install <package-name>\n```\n\n---\n\n## Project is ready (maybe)\n```js\nproject-root\n├── node_modules\n    ├── dependency-1\n    ├── dependency-2\n    └── dependency-3\n├── app.js\n├── package-lock.json\n└── package.json\n```\n\nCommon commands to start a project:\n\n```js\n$ npm start\n```\n```js\n$ npm run dev\n```\n```js\n$ node app.js\n```          \n\n---\n\n## ES `vs` CommonJS Modules\n- There are two competing standards for installing JS modules.\n- CommonJS came first and is the default method in Node.\n- ES Modules came later and is the official browser standard.\n- Browsers only support ES Modules but Node supports both.\n- The current trend is to use ES Modules.\n\n---\n\n## Examples\nCommonJS\n```js\nconst express = require(\'express\');\n```\n\n- `require()` will not work in the browser.\n\n--- \n\nES Modules\n```js\nimport Reveal from \'reveal.js\';\n```\n\n- `import` will work in Node but the software has to support it.\n- `package.json` needs to have a `type` of `module` in order to use ES Modules\n\n---\n\n## Further Learning\n';
const __vite_glob_0_14 = "# Github Projects\n\nAgile project organization with Kanban boards\n\n---\n\n### What are Project Boards\n\n- Kanban boards are commonly used or organize projects.\n- They are used in [Agile Project Management](https://project-management.com/agile-project-management/) among others.\n- You can simply use them to keep track of your own project\n- They are especially helpful in team projects\n\n---\n\n## Common Project Board Software\n- [Github Projects](https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)\n- [Trello](https://trello.com)\n- [Gitlab Boards](https://docs.gitlab.com/ee/user/project/issue_board.html).\n\n---\n\n### Basics of Your Project Board\n\n1. Status States\n    - TODO\n    - Doing\n    - Done\n    - Blocked\n2. Issues\n    - Tasks, bugs, action items etc.\n    - Comprised of (at minimum):\n      - A title\n      - A description\n      - A comment section\n    - Organize based on status in your kanban board\n3. Labels\n    - Use labels to group types of tasks. Ie:\n      - bug\n      - priority levels\n      - enhancement\n      - documentation\n      - easyfix\n---\n\n### Creating Issues Tips\n- Add the following to your issues:\n  - Context: describe the issue and necessary background information\n  - Definition of Done: the things that need to be accomplished for the issue to be considered resolved\n\n";
const __vite_glob_0_15 = '\n# URLS and File Paths\n## How to get where you\'re going\n\n---\n\n## Links and Paths\n\n---\n\n## File system links\n\n<p class="code" style="text-align: center; font-size: 64px"><strong>file:///</strong>Users/tony/Documents/...</p>\n\n- File system links only work on the computer it was created on.\n- Double-check the links in your projects to make sure they work on the web or other devs\' systems.\n\n---\n\n<h2>Absolute web links</h2>\n\n<p class="code" style="text-align: center; font-size: 64px"><strong>https://</strong>example.com/about.html</p>\n\n- Full web links are used for resources hosted on a different server than yours.\n\n---\n\n<h2>Relative to Web/System Root</h2>\n\n<p class="code" style="text-align: center; font-size: 64px"><strong>/</strong>images/profile.png</p>\n\n- points to `https://your-website.com/images/profile.png`\n- A leading slash starts at the top of the server file tree.\n- In the terminal, `/` starts at the top of the system hard drive\n\n---\n\n<h2>Relative to current document</h2>\n\n<p class="code" style="text-align: center; font-size: 64px">js/app.js</p>\n\n- The browser will look for an `js` directory next to the current file.\n\n---\n\n## Moving up directory tree\n<p class="code" style="text-align: center; font-size: 64px"><strong>../../</strong>js/app.js</p>\n\n- Browser looks two directories above the current file.\n\n---\n\n## Explicit current directory\n<p class="code" style="text-align: center; font-size: 64px"><strong>./</strong>js/app.js</p>\n\n- Javascript files often need to be explicitly relative to either the current document\n    - Sometimes `./` represents special folders\n- The `.` represents the current directory\n\n---\n\n## Anatomy of a URL\nSee: <a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL" target="_blank">What is a URL?</a>\n\n---\n\n### Protocol\n\n<p class="code"><strong>https://</strong>example.com/users?name=tony</p>\n\n<h3>Domain</h3>\n\n<p class="code">https://<strong>example.com</strong>/users?name=tony</p>\n\n<h3>File Path</h3>\n\n<p class="code">https://example.com<strong>/users</strong>?name=tony</p>\n\n<h3>Query Parameter</h3>\n\n<p class="code">https://example.com/users<strong>?name=tony</strong></p>\n\n---\n\n### REST Terminology\n<dl>\n  <dt>Endpoint</dt>\n  <dd>A fancy name for a URL Path.</dd>\n  <dt>Route</dt>\n  <dd>An HTTP Method paired with an Endpoint.</dd>\n  <dt>Path Segment</dt>\n  <dd>The bits of text located between the slashes (<code>/</code>) in a URL Path: <span class="code">/<strong>path</strong>/<strong>to</strong>/<strong>file</strong></span></dd>\n  <dt>Route Parameter</dt>\n  <dd>A variable passed as a Path Segment in a URL.</dd>\n</dl>\n\n---\n\n### Route Examples (GET)\nReading Static Files\n<ul class="code no-bullet">\n  <li>GET /about-us/index.html</li>\n  <li>GET /css/main.css</li>\n  <li>GET /images/logo.png</li>\n</ul>\n\nList of articles (JSON data)\n<p class="code">GET /api/articles</p>\n\nSingle article (JSON data)\n<p class="code">GET /api/articles/some-title</p>\n\n---\n\n### Other Route Examples\nCreate a new article:\n<p class="code">POST /api/articles</p>\n\nUpdate a single article:\n<p class="code">PUT /api/articles/some-title</p>\n\nDelete a single article:\n<p class="code">DELETE /api/articles/some-title</p>\n\n---\n\n### API Design & Documentation\nRoute Parameters\n<p class="code"></p>\n<ul class="code no-bullet">\n  <li>GET /api/users/<strong>:id</strong></li>\n  <li>PUT /api/users/<strong>:id</strong></li>\n  <li>GET /api/articles/<strong>:slug</strong></li>\n  <li>PUT /api/articles/<strong>:slug</strong></li>\n</ul>\n\nSorting\n<p class="code">GET /api/articles<strong>?sort=desc</strong></p>\n\nPagination\n<p class="code">GET /api/articles<strong>?page=2&per_page=10</strong></p>\n\n---\n\n## Further Learning\n- [What is a URL?](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL)\n- [Dealing with paths](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/Dealing_with_files)\n- [CRUD vs REST Guide: Operations Simplified 101](https://hevodata.com/learn/crud-vs-rest/)\n- Video: [What is a REST API?](https://www.youtube.com/watch?v=lsMQRaeKNDk)\n\n';
const __vite_glob_0_16 = '# Better Search Phrases\n## 90% of Web Dev is [Googling]\n![Screencap - Search js function](/images/misc/search-js-function.png)\n\n---\n\n## Terminology\n<dl>\n  <dt>Normie</dt>\n  <dd>Someone whose tastes, lifestyle, habits, and attitude are mainstream in a particular field or topic.</dd>\n  <dt>Expert/Superstar/Hotshot</dt>\n  <dd>Someone who is dazzlingly skilled or knowledgeable in a particular field or topic.</dd>\n  <dt>Jargon</dt>\n  <dd>Special words or expressions that are used by a particular profession or group and are difficult for others to understand.</dd>\n</dl>\n---\n\n## What makes you so special?\n### (Seriously)\nThink of a topic/field/profession in which:\n- you would consider yourself an expert;\n- your classmates would probably consider themselves a "normie";\n- you can dazzle most others with jargon they wouldn\'t understand.\n\nYou will be sharing this topic in a group discussion later.\n\n---\n\n## Why is search important?\n- Your learning will live and die on your ability to find high quality resources;\n- There\'s always a new tool/technology/framework to learn (and also someone to teach it);\n- It\'s rare that a problem hasn\'t already been solved (and shared) by someone else;\n- Devs are lazy and don\'t want to memorize anything.\n\n---\n\n## Why is search difficult?\n- High quality search results require high quality search terms;\n- You won\'t know these terms as a beginner;\n- Resources become outdated quickly.\n\n---\n\n### Quality Searches\nEffective search phrases are usually:\n1. **Concise**: Normally 1-4 words long\n    - _Exception_: Copy/pasting an error\n2. **Domain-specific**: Terms that are used within a specific industry and not in general usage by "normies"\n3. **Qualified**: Qualifying terms further filter the results based on:\n    - the skill level of the searcher\n    - the specific goal of the searcher\n    - a desired source of information\n\n---\n\n## Concise search phrases\n### Less is more\n- The more words you use, the more you dilute meaning;\n- Typing is tedious, do less of it;\n- All you need is that perfect word, but first you need to find it...\n\n---\n\n## More Terminology\n<dl>\n  <dt>Domain-specific Terminology</dt>\n  <dd>A domain-specific term for jaron.</dd>\n  <dt>Search qualifiers</dt>\n  <dd>Terms that help the search engine narrow your results.</dd>\n</dl>\n\n---\n\n## Nerdier terms\n#### (Use with caution)\nFolder &#8594; directory &#8594; project root &#8594; repository &#8594; repo\n\nPhoto &#8594; image &#8594; high-frequency raster image\n\nWeb address &#8594; URL &#8594; Top-level domain &#8594; TLD\n\n---\n\n## Activity: What\'s your jargon?\nIn groups of 3 or 4, and taking turns:\n1. Share an obscure hobby/topic/profession/etc with the group;\n2. For the **normies**: \n    - What terms do you know about the domain?\n3. For the **expert**:\n    - What domain-specific terms you can teach?\n4. Did anyone find a new friend to nerd out with?\n\n---\n\n## Qualifying terms\nA domain-specific term will still return many results that might not be focused enough to solve your problem:\n- Looking for tutorials?\n    ```html\n    node for beginners\n    node getting started\n    node examples\n    ```\n- Use nerdy terms for nerdy results. Are the results different between these terms?\n    ```html\n    css docs\n    css specs\n    ```\n\n---\n\n## Example Searches\nHow would you rate the following search phrases?\n- Were any words specific to the industry of web development? What are they?\n- How many words are used?\n- What is the skill level of the searcher? What problem might they be solving?\n- How would do you identify high quality results?\n\n---\n\n## "`How do I build a web site?`"\n\n---\n\n## "`Why isn\'t my CSS doing anything?`"\n\n---\n\n## "`web development`"\n\n---\n\n## "`html crash course`"\n\n---\n\n## "`js architecture patterns`"\n\n---\n\n## "`[your fave browser] devtools`"\n\n---\n\n## "`most underrated string methods`"\n\n---\n\n## Identifying high quality results\nGood resources:\n- Are current (does the resource have a date?);\n- Provide sample code;\n- Have video chapter markers;\n- Come from a trusted source;\n    - **Pro-tip**: prepend your favourite content creator to find results from that person/site:\n        ```\n        mdn fat arrow\n        ```\n- Are easy to find again. What search term would you use to find a favourite result in the future?\n\n---\n\n### Convergent vs Divergent Searching\n- **Convergent**: \n    - There is probably **one** answer to your problem\n    - Example: \n        - _What\'s the forecast for tomorrow?_\n- **Divergent**: \n    - There could be **many** answers to your problem\n    - You\'re doing general research\n    - Example: \n        - _What\'s an alternative to Netflix?_\n        - _Finding inspiration for a logo design_\n\n---\n\n## Divergent searches\n### with Suggestions\n![Screencap - Search why](/images/misc/search-why.png)\n\n---\n\n## Google (or whatever) Suggestions\n1. Enter a domain-specific term in your search bar but _DON\'T_ hit enter:\n    ```\n    js loop\n    ```\n2. Wait for Google to show completion suggestions\n    ![Example of a Suggestion search](/images/misc/divergent-search.png)\n3. Pick a Suggestion to learn something new about that concept.\n\n---\n\n## "Verses" searches\n![Screencap - Search js function](/images/misc/search-vscode-vs.png)\n\n- Add "vs" after a tool, concept, term.\n- Dig deeper by "verses searching" each of the suggested terms\n\n---\n\n### Activities: Divergent searching\n- Use Suggestions to find a new domain-specific term you didn\'t know before;\n- Try "verses" searches to find alternative to a tool you use everyday.\n\n';
const __vite_glob_0_17 = '\n# The Browser Triad\n## HTML, CSS and Javascript\n\n---\n\n![Illustration of the request/response cycle](/images/dev/browser-triad.png)\n\nSee: [HTML Tutorial for Beginners: HTML Crash Course](https://www.youtube.com/watch?v=qz0aGYrrlhU) by Mosh Hamedani\n\n---\n\n## The Browser Triad\nHTML, CSS and JS each do different and very important jobs in every web browser: \n- **HTML**: _Content Layer_\n- **CSS**: _Presentation Layer_\n- **Javascript**: _Behaviour Layer_\n\n---\n\n## HTML - Content Layer\nHTML defines the meaning and structure of web content.\n\n```html\n<section class="intro">\n  <h1>About Tony</h1>\n  <p>Tony likes to play games! His faves:</p>\n  <ul>\n    <li>Pinball</li>\n    <li>King of Tokyo</li>\n    <li>D&D</li>\n  </ul>\n</section>\n```\n\nSemantic HTML elements describe content and provide "meaning" to the browser (handy for screen readers)\n\n---\n\n## HTML Syntax\n![HTML Syntax](/images/html/grumpy-cat-small.png)\n\n![Attribute Syntax](/images/html/grumpy-cat-attribute-small.png)\n\nSee: [Getting started with HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started)\n\n---\n\n## CSS - Presentation Layer\nThe CSS that control the visual appearance of a web page. Examples: typography, layout, colour, etc.\n\n```css\nbody {\n  font-size: 20px;\n  text-align: center;\n  color: rebeccapurple;\n  background-color: lightgrey;\n}\n\nh1 {\n  border-bottom: 2px solid black;\n}\n```\n\n---\n\n### CSS Syntax\n![CSS Syntax](/images/css/css-declaration-small.png)\n\nSee: [CSS Basics](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics)\n\n---\n\n## Javascript - Behaviour Layer\nThe Javascript that controls the interactive behaviour of a web page. \n\nIn practice, the behaviour layer is responsible for everything the content and presentation layers _can\'t_ do (yet).\n\nJavascript will be covered in more detail later.\n\n---\n\n## Further Learning\n- Video: [HTML Tutorial for Beginners: HTML Crash Course](https://www.youtube.com/watch?v=qz0aGYrrlhU) by Mosh Hamedani\n- [Getting started with HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started)\n- [CSS Basics](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics)\n\n';
const __vite_glob_0_18 = '\n# Web Colour\n## Making sense of the options\n\n---\n\n## Web Colour Models\n- **Colour names** - Hard-coded common (sometimes) names:\n    ```css\n      color: rebeccapurple;\n    ``` \n- **Hexcode** - RGB format supported by most applications:\n    ```css\n      color: #663399; // or #639\n    ``` \n- **RGB** - A function-based format similar to Hex:\n    ```css\n      color: rgb(102, 51, 153);\n    ```\n- **HSL** - A human-friendly format based on the colour wheel:\n    ```css\n      color: hsl(270deg, 49%, 40%);\n    ```\n\n---\n\n## Key Takeaways\n- There are 140 supported **colour names** (minus aliases);\n- **Hex** (base-16) and **RGB** (base-10) are based on the same colour model with different syntax;\n- **HSL** is human-friendly and makes it easy to predict contrast ratio.\n\n---\n\n![Quote](/images/colour/quote.png)\n\nSource: [Read color hex codes](https://www.youtube.com/watch?v=eqZqx6lRPe0) by David DeSandro\n---\n\n### Colour names\n\n![Wheel of colour names](/images/colour/names.png)\n\n---\n\n### Hexadecimal\n\n![Hexadecimal](/images/colour/hexadecimal.png)\n\n---\n\n### Shortcodes\n\nTakes the first third and fifth numbers only.\n\n![Hexadecimal](/images/colour/shortcodes.png)\n\n---\n\n### Base-16 numbers\n\nLook at the shortcode to determine colour strength.\n\n![Hexadecimal](/images/colour/low-middle-high.png)\n\n---\n\n### RGB and Hex\n\nRGB channels range from 1-255<br>\nHex channels range from 0-f (in double digits)\n\n![Wheel of RGB](/images/colour/rgb-wheel.png)\n\n---\n\n### Neutral and Grays\n\nIn RGB/Hex neutrals and grays contain near equal amount of each colour. This can be hard to control in code.\n\n![Gray colour](/images/colour/gray.png)\n\n---\n\n### HSL - Hue, Saturation, Lightness\nProvides and human-friendly format that is also easily controlled with Javascript. See: [blend mode visualizer](https://acidtone.github.io/blendr/)\n\n![Wheel of HSL](/images/colour/hsl.png)\n\n---\n\n### hue\nMeasured in degrees in CSS\n\n![Hues on a colour wheel](/images/colour/hue.png)\n\n---\n\n### Saturation\nUsed to make neutrals and grays\n\n![Grid of decreasing saturation](/images/colour/saturation.png)\n\n---\n\n### Lightness\nThe key for predictable contrast ratios\n\n![Grid of decreasing brightness](/images/colour/lightness.png)\n\n---\n\n## How to Use Colour in your designs \n- Use the [60-30-10 rule](https://www.youtube.com/watch?v=UWwNIMHFdW4) to pick:\n    - 60% use of a **neutral** colour\n    - 30% use of a **primary** colour\n    - 10% use of a **call-to-action** colour\n- Use [colour harmonies](https://www.sarasoueidan.com/blog/hex-rgb-to-hsl/) when mixing colours;\n- Kevin Powell from [Give your site a fantastic color scheme fast](https://www.youtube.com/watch?v=mq8LYj6kRyE):\n    > Start with white, black and a "punch" colour.\n\n---\n\n## The 60-30-10 Rule\n\n![Example of neutral, primary and call-to-action colours](/images/colour/neutral-primary-cta.png)\n\n![Example of 60-30-10 ratio](/images/colour/60-30-10.png)\n\n---\n\n### Colour Harmonies\nVary hue angle to match a harmony\n\n![Grid of decreasing brightness](/images/colour/colour-harmonies.png)\n\n---\n\n## Contrast ratio\n- The color contrast between background and foreground content (that is, usually text) should be great enough to ensure legibility.\n- When designing readable interfaces for different vision capabilities, the WCAG guidelines recommend the [following contrast ratios](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Perceivable/Color_contrast).\n- **Use Lightness** to ensure foreground and background colours are high enough contrast.\n\n---\n\n## Determining contrast ratio\n1. Tony\'s fave [contrast ratio checker](https://contrast-ratio.com/)\n2. Firefox Inspector\n    1. Right-click and inspect an element with text;\n    2. Under `Rules`, find the color declaration of the text;\n    3. Click on the color swatch. An info window will pop up listing.\n';
const __vite_glob_0_19 = '\n# CSS Cascade\n## The Style Referee\n\n---\n\nIf two CSS declarations affect the same element but they conflict, which one wins?\n\nCSS:\n```css\nbody {\n  background: rebeccapurple;\n}\n\nbody {\n  background: grey;\n}\n```\n\n---\n\nThe cascade algorithm uses the following to decide which rules are applied when there\'s a conflict:\n\n1. Source origin\n2. Selector specificity\n3. Order of appearance\n\n---\n\n## Source Origin\nIn _decreasing_ order of importance:\n1. Inline `style` attribute\n    ```html\n    <p style="color: grey;"></p>\n    ```\n2. Embedded `<style>` element\n    ```css\n    <style>\n      p {\n        background: rebeccapurple;\n      }\n    </style>\n    ```\n3. External stylesheet\n    ```html\n    <link rel="stylesheet" href="styles.css">\n    ```\n\n---\n\n## Selector Specificity\nIn _decreasing_ order of selector importance:\n1. ID Selector\n2. Classes, attributes and pseudo-classes\n3. Elements and pseudo-elements\n\nSee the [Specificity Calculator](https://specificity.keegan.st/)\n\n---\n\n## Source order\nWhen there\'s still a tie, the declaration that comes last in source order, wins.\n\n---\n\n## Inspecting the Cascade\nWhen in doubt, inspect!\n\n![Screencap of the inspector](/images/css/cascade-inspector.png)\n\nThe Inspector will order all declarations from highest to lowest precedence.\n\n---\n\n## Further Learning\n- [CSS Cascade, specificity, and inheritance](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance)\n- Video: [Why is CSS so Weird?](https://www.youtube.com/watch?v=aHUtMbJw8iA) by Miriam Suzanne\n- Video: [Inspecting the CSS Cascade using Firefox DevTools](https://www.youtube.com/watch?v=Sp9ZfSvpf7A)';
const __vite_glob_0_20 = "\n# Introduction to CSS\n## The Presentation Layer\n\n---\n\n## What is CSS?\nCSS is a language for specifying how documents are presented to users — including fonts, colours and page layout.\n\n---\n\n## CSS syntax\nCSS is a rule-based language — you define the rules by specifying groups of styles that should be applied to particular elements or groups of elements on your web page.\n\n```\np {\n  color: red;\n  padding: 24px;\n}            \n```\n\n---\n\n![CSS Syntax](/images/css/css-declaration-small.png)\n\nSee: [CSS Basics](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics)\n\n---\n\n## Selectors\n\nA CSS selector is the part of a CSS rule that describes what elements in a document the rule will match. The matching elements will have the rule's specified style applied to them.\n\n---\n\n## Type Selectors\nThe CSS type selector matches elements by element name. \n\n```\nh1 {\n  color: brown;\n  border-bottom: 2px solid black;\n}\n```\n\nThese declarations are applied to every `<h1>` element on the page.\n\n---\n\n## Class Selectors\nThe CSS class selector matches elements based on the contents of their class attribute.\n\nHTML\n```html\n<p class=\"intro\">This is the story of my life...</p>\n<p>It was a dark and stormy night.</p>\n```\nCSS\n```css\n.intro {\n  font-style: italic;\n}\n```\n\nOnly the first paragraph is italicized.\n\n---\n\n## Descendant Selector\n\nThe descendant selectors combine two selectors such that elements matched by the second selector are selected if they have an ancestor (parent, parent's parent, parent's parent's parent, etc.) element matching the first selector.\n\n```css\n/* List items that are descendants of the \"my-things\" list */\nul.my-things li {\n  margin: 2em;\n}\n```\n\n---\n\n## Advanced Selectors\nThere are many, many ways to select HTML elements with CSS. We've covered the ones that you'll use most of the time.\n\nSee [Selector (CSS)](https://developer.mozilla.org/en-US/docs/Glossary/CSS_Selector) for a list of the rest.\n\n---\n\n## The Box Model\n\n![Box Model](/images/html/box-model.png)\n\nSource: [CSS: Box Model Explained](https://levelup.gitconnected.com/css-box-model-explained-60fc76fe9c4d)\n\n---\n\n## Box model properties\nThese properties are commonly used to style the box model of HTML elements:\n\n- [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)\n- [`border`](https://developer.mozilla.org/en-US/docs/Web/CSS/border)\n- [`padding`](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)\n- [`background`](https://developer.mozilla.org/en-US/docs/Web/CSS/border)\n- [`width`](https://developer.mozilla.org/en-US/docs/Web/CSS/width)\n    - [`max-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width)\n\n---\n\n## Width: Key takeaways\n- Block-level elements (`<h1>`, `<p>`, `<div>`, etc) are 100% wide by default;\n- The `width` of inline elements (`<strong>`, `<em>`, `<a>`, etc) cannot be changed;\n- By default, `padding` and `border` are not included when the browser calculates an element's width. Use the following to include them:\n    ```css\n    body {\n      box-sizing: border-box;\n    }\n    ```\n\n---\n\n## Where does CSS go?\nThere are three ways to add CSS to an HTML document:\n1. [External stylesheet](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_is_structured#external_stylesheet)\n2. [Internal stylesheet](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_is_structured#internal_stylesheet)\n3. Inline style (not linked because it's bad practice for this course)\n\n---\n\n## Further Learning\nMDN CSS Introduction Guides:\n- [What is CSS?](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/What_is_CSS)\n- [Getting started with CSS](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/Getting_started)\n- [How CSS is structured](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_is_structured)\n- [How CSS works](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_works)\n\n";
const __vite_glob_0_21 = '\n# Intermediate Flexbox\n## Grow, Shrink and Basis\n\n---\n\n## Key Takeaways\nThe `flex` property controls:\n- `flex-basis`: The optimal size (i.e. `width` when in row direction) that your item should be;\n- `flex-grow`: Whether your item will grow to fill empty space;\n- `flex-shrink`: Whether your item will shrink if there\'s no extra space available;\n\nSee: [`flex` property](https://css-tricks.com/almanac/properties/f/flex/) on CSS Tricks\n\n---\n    \n## Common values for `flex`\n`flex` is a shorthand property that is the recommended way to control `flex-shrink`, `flex-grow` and `flex-basis`.\n\n```css\nflex: <\'flex-grow\'> <\'flex-shrink\'> <\'flex-basis\'>\n```\n\n---\n\n## `flex: 0 auto;`\n- It\'s the shorthand for the **default value**: \n    ```css\n    flex: 0 1 auto;\n    ``` \n- This is the same as flex: initial; \n- It sizes the item based on its width/height properties (or its content if not set).\n\n---\n\n## `flex: auto;`\n- Is equivalent to:\n    ```css\n    flex: 1 1 auto;\n    ```\n- Beware, this is not the default value. \n- It sizes the item based on its `width`/`height` properties, but makes it fully flexible so that they absorb any extra space along the main axis.\n\n---\n\n## `flex: none;`\n- This is equivalent to:\n    ```css\n    flex: 0 0 auto;\n    ```\n- It sizes the item according to its width/height properties, but makes it fully inflexible.\n- This is similar to flex: initial except it is not allowed to shrink, even in an overflow situation.\n\n---\n\n## `flex: <positive-number>`\n- Equivalent to:\n    ```css\n    flex: 1 0px;\n    ```\n- It makes the flex item flexible and sets the flex basis to zero, resulting in an item that receives the specified proportion of the remaining space.\n\n---\n\n## `flex: <length>`\n- Equivalent to:\n  ```css\n  flex: 1 1 <length>;\n  ```\n- It makes the flex item inflexible and sets the flex basis to the supplied value, resulting in an item of that size instead of the size of its content.\n- This is the "Flex" way of assigning `width` in the row direction or `height` in the column direction (and is recommended).\n\n---\n\n\n## Filling extra space\nThe [`flex` shorthand property](https://css-tricks.com/almanac/properties/f/flex/) can be used to make items expand to fill extra space:\n\n```css\n.container {\n  display: flex;\n}\n.item {\n  flex: auto; /* default: 0 auto */\n}\n```\n\n---\n\n### Full-width horizontal navigation           \n```css\nnav ul {\n  display: flex;\n}\n\nnav ul > * {\n  flex: auto;\n}\n```\n\nAll items grow to fill space\n![Grow to fill space](/images/css/flex-grow.png)\n\n---\n\n### One full-width link\n```html\n<nav>\n  <ul>\n    <li><a href="#">Fighter</a></li>\n    <li class="barbarian"><a href="#">Barbarian</a></li>\n    <li><a href="#">Bard</a></li>\n    <li><a href="#">Rogue</a></li>\n  </ul>\n</nav>\n```\n\n```css\nnav ul {\n  display: flex;\n}\n\nnav ul > .barbarian {\n  flex: auto;\n}\n```\nOnly `.barbarian` grows to fill space:\n![One wide link](/images/css/wide-barbarian.png)\n\n---\n\n## Sticky footers\nA footer that "sticks" to the bottom of a short page:\n\n![Example of sticky footer](/images/css/sticky-footer.png)\n\n---\n\n### The code\n[Codepen demo](https://codepen.io/browsertherapy/pen/XWqZpLR)\n```html\n<!-- HTML -->\n\n<body>\n  <nav>Navigation here</nav>\n  <header>Site title here</header>\n  <main>Page content here</main>\n  <footer>Sticky footer here</footer>\n</body>\n```\n```css\n/* CSS */\n\nbody {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh; /* page will scroll if it needs to */\n}\n\nmain {\n  flex: auto; /* grows to fill page */\n}\n```\n\n---\n\n## Key Takeaways\n- The default for flex items:\n    ```css\n    .item {\n      flex: 0 auto; /* don\'t grow */\n    }\n    ```\n- Use `min-height` to force a container to be taller than short content but allow it to scroll with long content;\n- Flexboxes can be nested: use one in `column` direction for page layout and another in `row` (default direction) for navigation; \n\n---\n\n## `flex` Deep Dive\nThe `flex` shorthand property controls:\n- `flex-grow`: When items grow to fill space\n- `flex-shrink`: When items shrink\n- `flex-basis`: Flex version of width (or height)\n\nSee the following resources for more layout patterns using `flex`:\n- [Flexbox design patterns you can use in your projects](https://www.youtube.com/watch?v=vQAvjof1oe4) by Kevin Powell\n- Codepen: [Example code of above](https://codepen.io/browsertherapy/pen/oNYNXZO)\n';
const __vite_glob_0_22 = '# Flexbox navigation\n## Containers, Items & Semantic HTML\n\n---\n\n## Accessible Navigation\nScreen readers recognize the following semantic HTML elements as special:\n- `<header>` \n- `<main>`\n- `<nav>`\n- `<footer>`\n\nThese are given special labels that a blind user can navigate to on a page. `<section>`, `<article>` and `<aside>` are treated like any other `<div>`.\n\n---\n\n## Navigation best practices\n```html\n<!-- index.html -->\n<nav>\n  <ul>\n    <li><a href="#">Home</a></li>\n    <li><a href="#">Projects</a></li>\n    <li><a href="#">Contact</a></li>\n    <li><a href="#">Blog</a></li>\n  </ul>\n</nav>\n```\n- Wrap links in an unordered list;\n- Wrap unordered list in a `<nav>` element;\n\n![Flex container](/images/css/nav-vanilla.png)\n\n---\n\n## Styling lists as navigation\n**Step 1**: Remove a list\'s bullets and left padding:\n```css\n/* style.css */\nnav ul {\n  list-style: none;\n  padding-left: 0;\n}\n```\n\n![Flex container](/images/css/nav-bullets-padding.png)\n\n---\n\n**Step 2**: Make your links clickable by adding `padding` to the _link_ (not the list item). You will need to make you links block-level elements for this to work:\n```css\n/* style.css */\nnav a {\n  display: block;\n  padding: 0.5rem 1rem;\n}\n```\n\n![Flex container](/images/css/nav-link-padding.png)\n\n---\n\n**Step 3**: Add `:hover` states to add interaction for the user:\n```css\n/* style.css */\nnav a:hover {\n  background-color: black;\n  color: white;\n}\n```\n\n![Flex container](/images/css/nav-link-hover.png)\n\n---\n\n**Step 4**: Style your navigation as needed using properties such as:\n\n- `color`\n- `background-color`\n- `border`\n- `text-decoration`\n- `font-family`\n- `font-variant`\n- `box-shadow`\n\n---\n\n## Typical Vertical nav bar \nWith some added padding, typography and colour:\n\n![Typical vertical nav bar](/images/css/vertical-nav.png)\n\nSee: [Live Demo](https://codepen.io/browsertherapy/pen/XWjwJGL)\n\n---\n\n## Making Navigation horizontal\n### Flexbox to the rescue\n\n---\n\n## Terminology\n\n**Flex Container**\n: An element with `display: flex` which creates a "flex context" for its items. This is most often the `<ul>` in nav bars.\n\n**Flex Item**\n: All direct children of the Flex container. Often selected with a child selector such as `.container > *`. This is most often the `<li>` in nav bars.\n\nSee: [Complete Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\n\n---\n\n## Flex Axis and Direction\nA key concept with Flexbox is the **Main Axis** and the **Cross Axis**:\n\n![Diagram of Flexbox Axis](/images/css/flexbox-axis.png)\n\nSource: [Complete Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\n---\n\n## `ul` as Flex Container\nThe first step in creating a horizontal nav bar is to create a Flex Container on the `<ul>`:\n\n```css\n/* style.css */\nnav ul {\n  display: flex;\n}\n```\n\nWhich will create the default layout:\n\n![Flex container](/images/css/flex-default.png)\n\n---\n\n## Justifying Flex Items\n`justify-content` is the property that controls items in the **Main Axis** direction.\n\nYou can justify the links to the opposite end with `justify-content: flex-end`:\n\n```css\n/* style.css */\nnav ul {\n  display: flex;\n  justify-content: flex-end;\n}\n```\n\nWhich will create the following layout:\n\n![Justify end](/images/css/flex-end.png)\n\n---\n\n## Place links in the centre\nYou can centre the links in the menu with `justify-content: center`:\n\n```css\n/* style.css */\nnav ul {\n  display: flex;\n  justify-content: center;\n}\n```\n\nWhich will create the following layout:\n\n![Justify centre](/images/css/justify-centre.png)\n\n---\n\n## All extra space between the links\nYou can put all empty space between the links:\n\n```css\n/* style.css */\nnav ul {\n  display: flex;\n  justify-content: space-between;\n}\n```\n\nWhich will create the following layout:\n\n![Space between](/images/css/space-between.png)\n\n---\n\n## Equal space around each link\nYou can put an equal amount of space between each link (half-space on ends):\n\n```css\n/* style.css */\nnav ul {\n  display: flex;\n  justify-content: space-around;\n}\n```\n\nWhich will create the following layout:\n\n![Space around](/images/css/space-around.png)\n\n---\n\n## Equal space, including ends\nYou can space the link equally, including ends, with:\n\n```css\n/* style.css */\nnav ul {\n  display: flex;\n  justify-content: space-evenly;\n}\n```\n\nWhich will create the following layout:\n\n![Space evenly](/images/css/space-evenly.png)\n\n---\n\n## Links grow to fill extra space\nYou can have the links expand to fill all emtpy space with:\n\n```css\n/* style.css */\n/* container */\nnav ul {\n  display: flex;\n}\n\n/* items */\nnav ul > * {\n  flex: auto;\n}\n```\n\nWhich will create the following layout:\n\n![Grow to fill space](/images/css/flex-grow.png)\n\n---\n\n## Key Takeaways\n- If an element is a **direct child** of a Flex container, it becomes a Flex item;\n- Flex Items can be of a mix of any element type;\n- The default direction for `display: flex` is left-to-right;\n- The **main-axis** is controlled with `justify-content`;\n- The **cross-axis** is controlled with `align-items`;\n- **Important**: If the direction of a flexbox flips to `column`, the Axis also flip.\n\n---\n\n## Pro-tip: Flexbox Inspector\nUse the Flexbox Inspector by clicking the `flex` button on the HTML container in the inspector:\n\n![Flex Inspector](/images/css/flex-inspector.png)\n\n---\n\n## Further Learning\n- [Complete Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\n- Article: [Create a navbar with CSS flexbox ](https://dev.to/jungjungie/create-a-navbar-with-css-flexbox-2leh)\n- Sample Code: [Flexbox Navigation Examples](https://codepen.io/browsertherapy/pen/YzqdGpR)\n- Videos:\n    - Jenn Simmons: [Flexbox vs. CSS Grid — Which is Better?](https://youtu.be/hs3piaN4b5I)\n    - Net Ninja: [Creating a Menu with Flexbox](https://www.youtube.com/watch?v=2plKBskaKfY)\n\nLearning games for Flexbox:\n- [Flexbox Froggy](https://flexboxfroggy.com/)\n- [Flexbox Zombies](https://mastery.games/flexboxzombies/)\n';
const __vite_glob_0_23 = '\n# Hero Sections\n## Flex, CSS Images and Viewport Units\n\n---\n\n## Hero sections\n### Key Takeaways\n- Hero sections are usually displayed on the home page and important internal pages;\n- Smaller page banners are used on all other pages;\n- CSS images are used to allow overlapping text;\n- `height` or `min-height` is usually needed to the size of the hero section;\n- Flex and/or Grid can be used to center content vertically and horizontally;\n\n---\n\n## Centering Hero Content\n![Example of centred content](/images/css/centred-content.png)\n\n---\n\n### The Code\nHTML\n```html\n<body>\n  <header>\n    <img src="/path/to/file" alt="hero image" width="350" height="350">\n  </header>\n</body>\n```\n\nCSS\n```css\nheader {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  height: 100vh;\n  background-color: papayawhip;\n}\n```\n\n---\n\n## CSS Backgrounds\n### An easy way to overlap text on images\n![Example of centred content](/images/css/hero-image.png)\n\n---\n\n### The HTML Code\n```html\n<body>\n  <header>\n    <p>Web Fundamentals</p>\n  </header>\n</body>\n```\nFlexbox can position any content in your Hero sections:\n- Call-to-Action cards\n- Generic cards\n- Videos\n- etc\n\n---\n\n### The CSS Code\n\nFlex Positioning\n```css\nheader {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n\n  height: 100vh;\n}\n```\n\nBackground Image\n\n```css\nheader {\n  background-image: url(\'/path/to/file\');\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center; \n}\n```\n\n---\n\n## The Extras\nTry adding extra spice to your Hero sections:\n- Blend colours into your background image with [`background-blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode);\n- Enhance a background colour with a [`linear-gradient()`](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient) and/or [`radial-gradient()`](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/radial-gradient);\n- Create transparency with [`opacity`](https://developer.mozilla.org/en-US/docs/Web/CSS/opacity);\n\n';
const __vite_glob_0_24 = '\n# HTML Review\n## Inline vs Block Elements\n\n---\n\n## Inline elements\nUsed for word-level styles such as **bold** and _italicize_.\n- They respect `left` & `right` margins and padding, but **not** `top` & `bottom`;\n    - Use `line-height` to separate content in the up/down direction;\n- They cannot have a `width` and `height` set;\n- They allow other elements to sit to their left & right.\n- See:\n    - [block vs inline elements](https://stackoverflow.com/questions/9189810/css-display-inline-vs-inline-block) \n    - [Understanding the CSS box model for inline elements](https://hacks.mozilla.org/2015/03/understanding-inline-box-model/)\n\n---\n\n## Common inline elements\n- `strong`: For **bolding** text\n    ```\n    <p>Hello, <strong>World</strong>! How are you doing?</p>\n    ```\n- `em`: For _italicizing_ (emphasize) text\n    ```\n    <p>Hello, World! How are <em>you</em> doing?</p>\n    ```\n- `img`: HTML images\n    ```\n    <p> Images <img src="/path/to/image.png"> act like words by default.</p>\n    ```\n    - You will often use `display: block` on images to make them behave more intuitively.\n\n---\n\n## Block-level elements\nAre used for paragraph-like content. They:\n- Respect all sides of `margin` and `padding`;\n- Can have `width` and `height` set;\n- Force a line break after the block element;\n- Are full-width if width is not defined;\n- Are zero height if there is no content.\n\n---\n\n## Common Block-level elements:\n```\n<main>\n  <h1>Hello World!</h1>\n  <p>How are you doing?</p>\n</main>\n```\n- Headings: `<h1>`, `<h2>`, `<h3>`, `<h4>`, `<h5>`, `<h6>`\n- Paragraphs: `<p>`\n- Lists: `<ul>` (bulleted), `<ol>` (numbered)\n- Layout: `<header>`, `<footer`>, `<main>`, `<nav>`, `<section>`, `<article>` and `<aside>`\n- Generic: `<div>` is used for layout with no semantic meaning\n\n---\n\n## `display` Property\nThe display property controls which box model "mode" an HTML element is in. We will be covering the following display modes in this course:\n- `none`: removes the element from the document\n- `inline`: word level\n- `block`: paragraph level\n- `flex`: one-dimensional layouts (covered later)\n- `grid`: two-dimensional layouts (covered later)\n\n---\n\n# Raster HTML Images\n## Formats and HTML Images\n\n---\n\n## Terminology\n\n**Raster Image**: An image represented as a two-dimensional picture as a rectangular grid of square pixels.\n\n**Image encoder (aka. codec)**: A library/module that converts one image format to another. Not all encoders are created equal.\n\n**Lossy formats**: Compression in which some of the data from the original file is lost.\n\n**Lossless formats**: Compression in which the image is reduced without any quality loss.\n\n---\n\n![Chart of lossy and lossless characteristics](/images/images/loss-chart.png)\n\nSource: [Image compression deep-dive](https://www.youtube.com/watch?v=F1kYBnY6mwg)\n\n---\n\n![Chart of lossy and lossless codecs](/images/images/encoders.png)\n\n---\n\n## High-frequency Images\nParts of an image (or the whole image) where colour and contrast change a lot from one pixel to the next. \n\n![Example of a high frequency image](/images/images/high-frequency.jpg)\n\n---\n\n## Compression Artifacts\nDon\'t over-compress JPEG images or you will see compression artifacts.\n\n![Example of compression artifacts](/images/images/lossy-jpeg.png)\n\n---\n\n## Low-frequency Images\nParts of an image (or the whole image) where colour and contrast change very little from one pixel to the next.\n\n![Example of a low frequency image](/images/images/low-frequency.png)\n\n---\n\n## Dithering\nDithering is a technique used when there are too few colours in the image to smooth out gradients.\n\n![Example of a low frequency image](/images/images/dithering.png)\n\n---\n\n## Key Takeaways\n- The JPEG format has been traditionally used for high-frequency images.\n- The PNG format has been traditionally used for low-frequency images.\n- The GIF is should not be used. It sucks at everything.\n- The WebP format is about to replace JPEG and PNG and is the recommended format for this program. \n    - See: \n        - [Squoosh.app](https://squoosh.app/)\n        - [Image compression deep-dive](https://www.youtube.com/watch?v=F1kYBnY6mwg)\n\n---\n\n## HTML Images\n\n```html\n<img src="path/to/file" alt="alternate text">\n```\n\n- **`src` Attribute**: The `src` attribute is **required**, and contains the path to the image you want to embed.\n\n- **alt Attribute**: The `alt` attribute holds a text description of the image, which isn\'t mandatory but is incredibly useful for accessibility — screen readers read this description out to their users so they know what the image means.\n\nSource: [MDN Docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img)\n---\n\n## Additional Attributes\n```html\n<img width="100" height="150" loading="lazy" src="path/to/file" alt="alternate text" >\n```\n- **`width` and `height`**: For performance, it\'s recommended that you include `width` and `height` attributes that reference the actual dimensions of your image.\n    - See: [Do This to Improve Image Loading on Your Website](https://www.youtube.com/watch?v=4-d_SoCHeWE) by Jenn Simmons\n- **`loading=\'lazy\'`**: You can enable lazy loading for your images. The browser will delay downloading an image until it enters the viewport.\n\n---\n\n## Styling HTML images\n- Setting a `width` _and_ `height` may distort your image:\n    <img class="distorted" src="/images/images/high-frequency.jpg" alt="distorted image">\n- When in doubt, try:\n    ```css\n    img {\n      width: 100%;\n      height: initial;\n    }\n    ```\n- Images are `inline` by default. If you encounter weird behavior, try:\n    ```css\n    img {\n      display: block;\n    }\n    ```\n\n---\n\n## Getting fancy\nSome other CSS effects and techniques you can use on/with images:\n- **[`object-fit`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit)**: Very handy for getting images to fit inside containers.\n- **[`mix-blend-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode)**: For blending colours into images like you would in an image editor.\n    - See: Tony\'s [blendr app](https://acidtone.github.io/blendr/)\n- **[`clip-path`](https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path)**: For cutting images into shapes. \n    - See: \n        - [Clipping and Masking in CSS](https://css-tricks.com/clipping-masking-css/)\n        - [Codepen example](https://codepen.io/browsertherapy/pen/yLeobxq)\n\n';
const __vite_glob_0_25 = '\n\n# An Introduction to HTTP\nThe Hyper Text Transfer protocol is how a browser requests a web page from a server.\n\n\n---\n\n## HTTP Terminology\n<dl>\n  <dt>Resource</dt>\n  <dd>The target of a Request, such as an HTML document, JSON data, image, etc.</dd>\n  <dt>Client</dt>\n  <dd>In this course, a client is the browser that makes a request for a Resource.</dd>\n  <dt>Server</dt>\n  <dd>A server is a online computer that accepts a request from a client (browser) and returns a response (usually a file like HTML, CSS or images).</dd>\n</dl>\n\n---\n\n## Request/Response Cycle \n<dl>\n  <dt>HTTP Request</dt>\n  <dd>A request for a resource from the browser to a server.</dd>\n  <dt>HTTP Response</dt>\n  <dd>A response from a server to the browser containing either a requested resource or the result of an operation.</dd>\n</dl>\n\n---\n\n![Illustration of the request/response cycle](/images/http/request-response-cycle.png)\n\nSee: [HTML Tutorial for Beginners: HTML Crash Course](https://www.youtube.com/watch?v=qz0aGYrrlhU) by Mosh Hamedani\n\n---\n\n## Example Request/Response\nSee: [HTML Tutorial for Beginners: HTML Crash Course](https://www.youtube.com/watch?v=qz0aGYrrlhU)\n---\n\n1. The browser makes a GET Request for a URL.\n\n![Illustration of the request/response cycle](/images/http/request.png)\n\n2. The server receives the Request and finds the Resource such as a file, image or data.\n\n---\n\n3. The server sends the Resource back as a Response.\n\n![Illustration of the request/response cycle](/images/http/response.png)\n\n4. The browser receives the Response and might: display a page/image/etc, load JSON data with Javascript, etc.\n    \n---\n\n![Illustration of the request/response cycle](/images/dev/front-back-full.png)\n\n- Industry job descriptions are often based on whether you code for the browser or the server. Full stack developers code for both.\n\n---\n\n## Anatomy of a URL\nSee: <a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL" target="_blank">What is a URL?</a>\n\n---\n\n### Protocol\n\n<p class="code"><strong>https://</strong>example.com/users?name=tony</p>\n\n<h3>Domain</h3>\n\n<p class="code">https://<strong>example.com</strong>/users?name=tony</p>\n\n<h3>File Path</h3>\n\n<p class="code">https://example.com<strong>/users</strong>?name=tony</p>\n\n<h3>Query Parameter</h3>\n\n<p class="code">https://example.com/users<strong>?name=tony</strong></p>\n\n---\n\n## Links and Paths\n\n---\n\n## File system links\n\n<p class="code" style="text-align: center; font-size: 64px"><strong>file:///</strong>Users/tony/Documents/...</p>\n\n- File system links only work on the computer it was created on.\n- Double-check the links in your assignments to make sure they work on the web or your instructor\'s system.\n\n---\n\n<h2>Absolute web links</h2>\n\n<p class="code" style="text-align: center; font-size: 64px"><strong>https://</strong>example.com/about.html</p>\n\n- Full web links are used for resources hosted on a different server than yours.\n\n---\n\n<h2>Relative to Web Root</h2>\n\n<p class="code" style="text-align: center; font-size: 64px"><strong>/</strong>images/profile.png</p>\n\n- points to `https://your-website.com/images/profile.png`\n- Relative links are for files that are in the same website as the current document.\n- A leading slash starts at the top of the server file tree.\n\n---\n\n<h2>Relative to current document</h2>\n\n<p class="code" style="text-align: center; font-size: 64px">about/index.html</p>\n\n- The browser will look for an `about` directory next to the current file.\n\n---\n\n## Moving up directory tree\n<p class="code" style="text-align: center; font-size: 64px"><strong>../../</strong>about/index.html</p>\n\n- Browser looks two directories above the current file.\n\n---\n\n## Explicit current directory\n<p class="code" style="text-align: center; font-size: 64px"><strong>./</strong>js/app.js</p>\n\n- Javascript files sometimes need to be explicitly relative to the current directory with one dot.\n- This is why `$ git add .` adds all files in the current directory.\n\n---\n\n## Further Learning\n- [How the Web Works](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works)\n- [What is a URL?](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL)\n- [HTML Tutorial for Beginners: HTML Crash Course](https://www.youtube.com/watch?v=qz0aGYrrlhU) by Mosh Hamedani\n';
const __vite_glob_0_26 = "\n# Responsive Banners\n## Nested Flex and Media Queries\n\n---\n\n## Dealing with overflow\nYou usually want to avoid horizontal overflow on a page. This is a common problem with navigation on mobile:\n\n![Example of horizontal navigation overflow](/images/css/nav-overflow.png)\n\n---\n\n## Option 1: `flex-wrap`\nYou can wrap items with [`flex-wrap`](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-wrap). Wrapped nav elements are sometimes difficult to work nicely with but it's better than overflow:\n\n```css\n.container {\n  display: flex;\n  flex-wrap: wrap; /* default: nowrap */\n}\n```\n\n![Example of wrapping navigation](/images/css/nav-wrap.png)\n\n---\n\n## Option 2: `@media` query\n[Media Queries](https://css-tricks.com/a-complete-guide-to-css-media-queries/) are like if statements for CSS, based on some browser condition (i.e. screen width, but there are others):\n\n```css\n.container {\n  display: block;\n}\n\n@media screen and (min-width: 40em) {\n  /* screen is larger than 40em */\n  .container {\n    display: flex;\n  }\n}\n```\nThis is a **mobile-first** media query: The mobile styles come first and are overridden when the screen is larger than `40em`;\n\n---\n\n### Resulting Breakpoint\nScreen is narrower than `40em` (the default in a mobile-first design):\n\n![Example of mobile navigation](/images/css/media-narrow.png)\n\nScreen is wider than `40em`:\n\n![Example of desktop navigation](/images/css/media-wide.png)\n\n---\n\n## Mobile-first vs Desktop-first\n<dl>\n  <dt>Mobile-first Design (recommended)</dt>\n  <dd>When a designer builds a website for mobile and then adds more complex layouts for desktop with a <code>min-width</code> media query.</dd>\n  <dt>Desktop-first Design</dt>\n  <dd>When a designer builds a complex layout for desktop and then simplifies the layout on mobile screens with a <code>max-width</code> media query.</dd>\n</dl>\n\n---\n### Hamburger menus\nA common mobile pattern is to use a button toggle:\n\n![Example of open nav menu](/images/css/toggle-open.png)\n\nSee: [Create a responsive navigation nav with no JS!](https://www.youtube.com/watch?v=8QKOaTYvYUA) by Kevin Powell\n\n---\n\n\n## Banners with Nested Flexboxes\n### Key Takeaways\n- Flexbox/Grid Items can also be Flex/Grid Containers;\n- Nested containers are often used to layout primary navigation with site logos/titles;\n- Common banner layout pattern for internal pages:\n    ![Example banner for program website](/images/css/page-banner.png)\n\n---\n\n## Nested Example\nThe program website uses two nested Flexboxes (actually more) in its banner:\n\nOuter Flexbox:\n![Banner flex inspector](/images/css/outer-flexbox.png)\n\nLogo/Site title Flexbox:\n![Site title flex inspector](/images/css/site-title-flexbox.png)\n\nNavigation Flexbox:\n![Navigation flex inspector](/images/css/nav-flexbox.png)\n\n---\n\n## Further Learning\n- MDN: [Beginner's guide to media queries](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Media_queries)\n- Kevin Powell: [How to Take the Right Approach to Responsive Web Design](https://www.freecodecamp.org/news/taking-the-right-approach-to-responsive-web-design/)\n    - Companion video: [Are you writing responsive CSS the wrong way?](https://www.youtube.com/watch?v=0ohtVzCSHqs)\n- Kevin Powell: [Create a responsive navigation nav with no JS!](https://www.youtube.com/watch?v=8QKOaTYvYUA)\n\n";
const __vite_glob_0_27 = `# Quiz Time!
## UI Icons and The Triad

---

## The Browser Triad
HTML, CSS and JS each do different and very important jobs in every web browser: 
- **HTML**: _Content_
    - Gives a web page its structure.
    - Semantically describes content.
- **CSS**: _Presentation_
    - Typography, colour, layout, animation, etc.
- **Javascript**: _Behaviour_
    - In practice, everything HTML and CSS can't currently do.

---

## Icon do what?
Which of the Browser Triad technologies is most associated with the following User Interface icons?

---

## Paragraph
<i class="fa-solid fa-5x fa-paragraph"></i>

---

## Headings
<i class="fa-solid fa-heading fa-5x"></i>

---

### Bulleted list
<i class="fa-solid fa-5x fa-list"></i>

---

## Numbered list
<i class="fa-solid fa-5x fa-list-ol"></i>

---

### Align center
<i class="fa-solid fa-align-center fa-5x"></i>

---

### Bold
<i class="fa-solid fa-bold fa-5x"></i>

---

## Italics
<i class="fa-solid fa-italic fa-5x"></i>

---

## Links
<i class="fa-solid fa-link fa-5x"></i>

---

### Fast forward
<i class="fa-solid fa-forward-fast fa-5x"></i>

---

### superscript
<i class="fa-solid fa-superscript fa-5x"></i>

---

### Indent
<i class="fa-solid fa-indent fa-5x"></i>

---

### Print
<i class="fa-solid fa-print fa-5x"></i>

---

### Fontface
<i class="fa-solid fa-font fa-5x"></i>

---

### Fill
<i class="fa-solid fa-fill fa-5x"></i>

---

### Image
<i class="fa-regular fa-image fa-5x"></i>

---

### Write down your answers for later !
`;
const __vite_glob_0_28 = '\n# Web Typography\n## Designing Readable Web Type\n\n---\n\n## Fallbacks and overrides\nSee: [Cascade and inheritance](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance)\n\n**Inheritance**\n: When CSS property values set on parent elements are inherited by their child elements. Most font settings are inherited.\n\n**Fallback**\n: A default setting or configuration that activates when a CSS declaration fails.\n\n**CSS Override**\n: A aspect of the cascade where a previous CSS declaration is overwritten by another that has higher priority/specificity.\n\n---\n\n## Key Takeaways\n1. Because font settings are inherited, base declarations are set on the `body` element. \n2. The `font-family` declaration has built-in fallbacks separated by commas.\n3. Use `rem` over `em` when setting font-based units to avoid strange inheritance issues.\n    ```css\n    h1 {\n      font-size: 2rem;\n    }\n    ```\n4. Set the line length by declaring a `max-width` on the container using `ch` units.\n\n---\n\n## Typography Triad\nReadable text is a balance of the following fundamental characteristics of typography:\n1. Font size\n3. Line length\n2. Line spacing\n\n![Example of the typography triad](/images/design/typography-triad.png)\n\n---\n\n### 1. [`font-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) \n- The base font size is often declared in `px` units on the parent `body` element. \n    ```css\n    body {\n      font-size: 20px;\n    }\n    ```\n- Derivative font sizes (such as for headings, navigation, etc) are usually declared in `rem` units.\n    - [Confused About REM and EM?](https://j.eremy.net/confused-about-rem-and-em/) by Jeremy Church\n- The default font size in most browsers is `16px`.\n\n---\n\n### 2. [`line-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height)\n- `line height` is defined as a ratio of `font-size`. For example, \n    - if `line-height` is 1.5 and `font-size` is 16px, `4px` of spacing will be added above and below the line for a total line height of `24px`.\n- The default for most browsers is 1.2, which is too small in most cases.\n- In general, aim for a line length between 1.4 and 2.\n    ```css\n    body {\n      line-height: 1.5;\n    }\n    ```\n\n---\n\n### 3. Line length\n- Line length is usually defined by declaring a `max-width` on the container width;\n    ```css\n    .container {\n      max-width: 75ch;\n    }\n    ```\n- Max line length for print: 95 [characters](https://css-tricks.com/the-lengths-of-css/#ch)\n- Max line length for web: 75-85 characters\n- Min (multi)line length for web: ~30 characters\n\n---\n\n## Units for setting `font-size`\n\n---\n\n### `px`\n- 96 pixels = 1 "inch"\n  - Defined in the core browser settings (and is rarely 1 inch);\n- Used for setting base `font-size` of the `body`;\n    ```\n    body {\n      font-size: 20px;\n    }\n    ```\n- Set all other `font-size` declarations using relative units (next slides).\n\n---\n\n### `rem`\n- Is always equal to the `font-size` of the root element (`body` or `html`).\n- When in doubt, no one got fired for using `rem` units.\n- See: [em vs rem](https://codepen.io/browsertherapy/pen/VwKNELp) (Codepen)\n    - In the CSS panel, change the `font-size` of the `li` element so that it uses `rem` units.\n\n---\n\n### `em`\n- `1em` is equal to the  `font-size` of the parent element.\n- `em` is often used for whitespace such as `margin` and `padding`;\n- Avoid setting `font-size` in `em` units. Use `rem` instead.\n    - See: [Why you shouldn\'t set font-sizes using em](https://youtu.be/pautqDqa54I) by Kevin Powell\n- If setting a length for another property: `1em` is equal to the `font-size` setting of the element itself.\n\n---\n\n### `ch` (character)\n- Defined as the width of the glyph "`0`" of the current element\'s font face.\n- Tony loooooves setting setting text boxes in `ch` units.\n- Warning: the value of `ch` changes with different `font-family` declarations. Don\'t use `ch` if you need a consistent width.\n- See: [Length comparison: rem vs ch](https://codepen.io/browsertherapy/pen/RwRPrvm)\n\n---\n\n### `vw` (viewport width)\n- Used to make `font-size` scale with screen width;\n- Best used in combination with [`clamp()`](https://developer.mozilla.org/en-US/docs/Web/CSS/clamp) to set minimum and maximums.\n    ```\n    body {\n      font-size: clamp(16px, 3vw, 24px);\n    }\n    ```\n\n---\n\n## Extras\n- [`font-variant`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant): Used for setting small caps;\n- [`letter-spacing`](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing): Great for spacing letters in headings;\n- [`word-spacing`](https://developer.mozilla.org/en-US/docs/Web/CSS/word-spacing): Rarely used but can come in handy for logos and site titles;\n- [`clamp()`](https://developer.mozilla.org/en-US/docs/Web/CSS/clamp): used for setting minimum and maximum values on relative font sizes\n';
const __vite_glob_0_29 = '\n# HTTP and REST\n## Accessing Online Data \n\n---\n\n## Request/Response Cycle \n<dl>\n  <dt>HTTP Request</dt>\n  <dd>A request for a resource from the browser to a server.</dd>\n  <dt>HTTP Response</dt>\n  <dd>A response from a server to the browser containing either a requested resource or the result of an operation.</dd>\n</dl>\n\n---\n\n## HTTP Terminology\n<dl>\n  <dt>Resource</dt>\n  <dd>The target of a Request, such as an HTML document, JSON data, image, etc.</dd>\n  <dt>Method</dt>\n  <dd>A CRUD operation performed on a resource: \n    <ul>\n      <li>POST (Create)</li>\n      <li>GET (Read)</li>\n      <li>PUT (Update)</li>\n      <li>DELETE (Delete)</li>\n    </ul>\n  </dd>\n</dl>\n\n---\n\n## Example Request/Response\n1. The browser makes a GET Request for a URL.\n2. The server receives the Request and finds the Resource such as a file, image or data.\n3. The server sends the Resource back as a Response.\n4. The browser receives the Response and might:\n    - display a page/image/etc, OR;\n    - load JSON data with Javascript.\n\n\n---\n\n## Anatomy of a URL\nSee: <a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL" target="_blank">What is a URL?</a>\n\n---\n### Protocol\n<p class="code"><strong>https://</strong>example.com/users?name=tony</p>\n\n### Domain\n<p class="code">https://<strong>example.com</strong>/users?name=tony</p>\n\n### Path (Endpoint)\n<p class="code">https://example.com<strong>/users</strong>?name=tony</p>\n\n### Query Parameter\n<p class="code">https://example.com/users<strong>?name=tony</strong></p>\n\n---\n\n## REST APIs\nA standard method of using HTTP to transfer data and/or perform actions between a browser and a server.\n\n---\n\n### REST Terminology\n<dl>\n  <dt>Endpoint</dt>\n  <dd>A fancy name for a URL Path.</dd>\n  <dt>Route</dt>\n  <dd>An HTTP Method paired with an Endpoint.</dd>\n  <dt>Path Segment</dt>\n  <dd>The bits of text located between the slashes (<code>/</code>) in a URL Path: <span class="code">/<strong>path</strong>/<strong>to</strong>/<strong>file</strong></span></dd>\n  <dt>Route Parameter</dt>\n  <dd>A variable passed as a Path Segment in a URL.</dd>\n</dl>\n\n---\n### Route Examples (GET)\nReading Static Files\n<ul class="code no-bullet">\n  <li>GET /about-us/index.html</li>\n  <li>GET /css/main.css</li>\n  <li>GET /images/logo.png</li>\n</ul>\n\nList of articles (JSON data)\n<p class="code">GET /api/articles</p>\n\nSingle article (JSON data)\n<p class="code">GET /api/articles/some-title</p>\n\n---\n\n### Other Route Examples\nCreate a new article:\n<p class="code">POST /api/articles</p>\n\nUpdate a single article:\n<p class="code">PUT /api/articles/some-title</p>\n\nDelete a single article:\n<p class="code">DELETE /api/articles/some-title</p>\n\n---\n\n### API Design & Documentation\nRoute Parameters\n<p class="code"></p>\n<ul class="code no-bullet">\n  <li>GET /api/users/<strong>:id</strong></li>\n  <li>PUT /api/users/<strong>:id</strong></li>\n  <li>GET /api/articles/<strong>:slug</strong></li>\n  <li>PUT /api/articles/<strong>:slug</strong></li>\n</ul>\n\nSorting\n<p class="code">GET /api/articles<strong>?sort=desc</strong></p>\n\nPagination\n<p class="code">GET /api/articles<strong>?page=2&per_page=10</strong></p>\n\n---\n\n## Further Reading\n- <a href="https://hevodata.com/learn/crud-vs-rest/" target="_blank">CRUD vs REST Guide: Operations Simplified 101</a>\n- Video: <a href="https://www.youtube.com/watch?v=lsMQRaeKNDk" target="_blank">What is a REST API?</a>\n\n';
const __vite_glob_0_30 = "\n# Javascript Arrays\n## Nerds start counting at `0`\n---\n\n### Terminology\n<dl>\n  <dt>Array index</dt>\n  <dd>The location of an item in an array. This is always a sequential number starting at <code>0</code>.</dd>\n  <dt>Array item</dt>\n  <dd>Any Javascript data type (i.e. value) that an array index points to.</dd>\n  <dt>Array length</dt>\n  <dd>The number of items in an array accessed by <code>array.length</code>.</dd>\n</dl>\n\n---\n\n### Value data types\nThe _value_ of an item can be any data type: `undefined`, `null`, `number`, `string`, `boolean`, `array`, `object`, etc.\n\n```js\n\nconst randomStuff = [null, 9, 'Hello World!'];\n\n\n```\n\nAlthough it's possible, you won't often see a mix of different value types in the same array.\n\n---\n\n### Accessing array items\n\n```js\nconst animals = ['Puppy', 'Bear', 'Moose', 'Tiger', 'Husky'];\n```\nThe _first_ index of an array is `0`.\n\n```js\nconst firstAnimal = animals[0]; // Puppy\n```\n\nThe _last_ index is `Array.length - 1`.\n\n```js\nconst lastAnimal = animals[animals.length - 1]; // Husky\n```\n\n---\n\n### Mutation and `const`\nCreating an array using `const` still allows you to change (or mutate) the items in that array.\n\n```js\nconst hobbies = ['pinball', 'bug hunting', 'napping'];\n\nhobbies[2] = 'proper sleeping'; // No error!\n```\n\n`const` only stops you from _re-assigning_ `hobbies`, not changing `hobbies`.\n\n---\n\n## Common array operations\n\n---\n\n### Finding items\n\n```js\nconst animals = ['Puppy', 'Bear', 'Tiger', 'Husky', 'Puppy'];  \n```\n\nFind the _first_ index of an item with `array.indexOf()`\n```js\nlet pos = animals.indexOf('Puppy'); // 0\n```\n\nFind the _last_ item with `array.lastIndexOf()`\n```js\nconsole.log(animals.lastIndexOf('Puppy'));\n// Expected output: 4\n```\n\n---\n\n### Adding items\nAdd an item with `array.length`.\n\n```js\nanimals[animals.length] = 'Wolf'; // New item\n```\n\nAdd an item with `array.push()`:\n```js\nconst animals = ['Puppy', 'Bear', 'Moose', 'Tiger', 'Husky'];\n\nanimals.push('Kitty');\n// ['Puppy', 'Moose', 'Tiger', 'Husky', 'Kitty']\n\n```\n\n---\n\n### Removing items\nRemove the last item with `array.pop()`:\n\n```js\nconst animals = ['Puppy', 'Bear', 'Moose', 'Tiger', 'Husky'];\nlet removedItem = animals.pop();\n\nconsole.log(removedItem);\n// 'Husky'\n\nconsole.log(animals)\n// ['Puppy', 'Bear', 'Moose', 'Tiger']\n```\n\nRemove an item by index with `array.splice()`\n\n```js\nlet removedItem = animals.splice(pos, 1); \n\nconsole.log(removedItem);\n// 'Bear'\n\nconsole.log(animals)\n// ['Puppy', 'Moose', 'Tiger', 'Husky']\n```\n\n---\n\n### Searching Arrays\nThe `includes()` method determines whether an array includes a certain value among its entries, returning true or false as appropriate.\n```js\n\nconst pets = ['cat', 'dog', 'bat'];\n\nconsole.log(pets.includes('cat')); // true\n\nconsole.log(pets.includes('at')); // false\n\n```\n\n---\n\n### Converting an Array to a String\nThe `join()` method creates and returns a new string by concatenating all of the elements in an array, separated by commas or a specified separator string.\n```js\nconst elements = ['Fire', 'Air', 'Water'];\n\nconsole.log(elements.join()); // \"Fire,Air,Water\"\n\nconsole.log(elements.join('')); // \"FireAirWater\"\n\nconsole.log(elements.join('-')); // \"Fire-Air-Water\"            \n\n```\n\n---\n\n## Further resources\n- MDN: [Arrays](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays)\n- In [JavaScript Tutorial for Beginners: Learn JavaScript in 1 Hour](https://www.youtube.com/watch?v=W6NZfCO5SIk) by Mosh\n    - 35:22 [Arrays](https://www.youtube.com/watch?v=W6NZfCO5SIk&t=2122s)\n- [Start of Array Exercises](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/store-multiple-values-in-one-variable-using-javascript-arrays) on Free Code Camp\n";
const __vite_glob_0_31 = "\n## Asynchronous JS\n### Retrieving data with `fetch()` \n\n---\n\n### Problem\n- Unlike other languages, Javascript is single-threaded. This means that one process has to handle all requests in a browser tab.\n- This means it can't wait for data to come back from a network request; it's got stuff to do. \n- Instead, it sends the request and sets a \"reminder\" to deal with the response when it arrives. \n- We used to do this with callbacks, now we use Promises.\n\n---\n\n### Terminology\n<dl>\n  <dt>Callback</dt>\n  <dd>A function passed to another function as a value, to be invoked later.</dd>\n  <dt>Promise</dt>\n  <dd>New in ES6: used for asynchronous code instead of callbacks. Can only have one of two outcomes: success or failure.</dd>\n  <dt><code>async</code>/<code>await</code></dt>\n  <dd>New in ES7: provides a cleaner syntax for Promises but does the same thing.</dd>\n</dl>\n\n---\n\n### Traditional Promises\nThe \"old-school\" (but still valid) ES6 method of executing asynchronous JS with the `.then()`/`.catch()` syntax.\n\n```js\nfetch('https://example.com/path-to-json')\n  .then(function(response){\n    return response.json();\n  })\n  .then(function(data){\n    console.log(data);\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n\n---\n\n### Newer syntax of `async`/`await`\nES7 introduced a more popular syntax for using promises. It's functionally the same as `.then()` and `.catch()` but with less typing.\n\n```js\nconst fetchData = async function() {\n  const response = await fetch('https://example.com/path-to-json');\n  const data = await response.json();\n\n  console.log(data);\n}\n\nfetchData();\n```\n---\n\n### `async` functions\nIn order to use the `await` keyword, you need to wrap your code inside an asynchronous function defined with the `async` keyword.\n\n```js\nconst fetchData = async function() { \n  // `await` can now be used inside this function\n\n};\n```\n\n---\n\n### \"Pausing\" your code with `await`\n`await` is used to \"pause\" your code when invoking a function that returns a promise, like `fetch()` and `response.json()`.\n\n```js\nconst fetchData = async function() {\n  const response = await fetch('/api/characters/5');\n\n  const data = await response.json();\n\n  console.log(data);\n}\n\nfetchData();\n```\n\n---\n\n### Key Takeaways\n- The execution of a script will finish before asynchronous code can execute.\n- Promises act as a \"reminder\" for your code to process a response once it arrives.\n- Old Promise syntax uses `.then()` and `.catch()`. It works but it's clunky.\n- Modern `async`/`await` syntax does the same thing as `.then()` and `.catch()` but with more intuitive code.\n\n---\n\n### Things to remember with `async`/`await`\n- `await` only works inside a function defined with the `async` keyword.\n- `await` must be added in front of any function that returns a Promise.\n- Any data returned from a Promise is only available inside the `async` function.\n- Use `try...catch` blocks to handle rejected Promises (covered tomorrow).\n\n---\n\n### Things to remember with `fetch()`\nThe `fetch` API takes specific steps when requesting data:\n1. `fetch(url)` will make an asynchronous request to a server for data;\n2. That response will return with JSON;\n3. The JSON is then converted to regular Javascript data using `response.json()`;\n4. The resulting `data` can then be used normally within the `async` function.\n\n---\n\n## Further resources\n- MDN Readings:\n    - [General asynchronous programming concepts](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Concepts)\n    - [Introducing asynchronous Javascript](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing)\n- [How to Use Fetch with async/await](https://dmitripavlutin.com/javascript-fetch-async-await/)\n- [Working with JSON data](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON)\n- Tool: [JSON Placeholder](https://jsonplaceholder.typicode.com/)\n- Reference: [List of Public APIs](https://github.com/public-apis/public-apis)\n\n";
const __vite_glob_0_32 = "\n## Functions and Events\n### Running functions when something happens\n\n---\n\n### Terminology\n<dl>\n  <dt>Function</dt>\n  <dd>A reusable block of code that can be run multiple times.</dd>\n  <dt>Invoking (running) a function</dt>\n  <dd>When the code of a function is \"turned on\" by placing <code>()</code> after the function name.</dd>\n  <dt>Callback function</dt>\n  <dd>A function that's passed to another function as an argument, to be invoked later.</dd>\n</dl>\n\n---\n\n## Declaring functions\nOption 1: Function statements\n```js\nfunction greet() {\n  console.log('Hi!');\n}\n```\n\nOption 2: Function expression (ES5)\n```js\nconst greet = function() {\n  console.log('Hi!');\n};\n```\nOption 3: Function expression (ES6)\n```js\nconst greet = () => {\n  console.log('Hi!');\n}\n```\n---\n\n### Option 1\n## Function statement\n```js\nfunction greet() {\n  console.log('Hi!');\n}\n```\n- This is the classic method that is similar to many other languages;\n- Function statements are subject to [hoisting](https://www.digitalocean.com/community/tutorials/understanding-hoisting-in-javascript), which is why we'll use options 2 and 3 in this course;\n\n---\n\n### Option 2\n## Function expression (ES5)\n```js\nconst greet = function() {\n  console.log('Hi!');\n};\n```\n- Function expressions are defined with `const` or `let` like any other variable;\n- This is the method used in class (for now);\n\n---\n\n### Option 3\n## Function expression (ES6)\n```js\nconst greet = () => {\n  console.log('Hi!');\n}\n```\n- This is the new fancy way;\n- This is mostly the same as the ES5 method, but is less typing;\n\n---\n\n## Invoking a function\nAssuming a function has been declared:\n\n```js\nconst greet = function() {\n  console.log('Hi!');\n};\n```\n\nYou can invoke (run) the function with `()`:\n\n```js\ngreet(); // \"Hi!\"\n```\n\n---\n\n## Key Takeaways\n- Code inside a function does not execute at the time the function is declared;\n- You have to invoke a function with `()` to run the code inside it.\n- Without `()`, the function is treated like any other variable.\n\n---\n\n## Callbacks and Events\n### Running functions when something happens\n\n---\n\n### Terminology\n<dl>\n  <dt>Callback function</dt>\n  <dd>A function that's passed to another function as an argument, to be invoked later.</dd>\n  <dt>Browser event</dt>\n  <dd>Some pre-defined trigger created by the user (button click), network (file received), operating system (dark mode enabled), etc.</dd>              \n  <dt>Event listener</dt>\n  <dd>Listeners run a function when a particular event happens, like a button click.</dd>\n</dl>\n\n---\n\n## Callback functions\nBecause functions are variables, one can be passed to another function as an argument, making it a callback function.\n\n```js\nconst greet = function() {\n  console.log('Hi!');\n};\n\nconst sendInvite = function(callback) {\n  callback();\n}\n\nsendInvite(greet); // \"Hi!\"\n```\n\n---\n\n## But why use callbacks?\n### For us, mostly for click events\n\n---\n\n### Step 1\n## Create a callback function\n```js\nconst greet = function() {\n  console.log('Hi!');\n};\n\n---\n\n### Step 2\n## Create a button variable\n\n```html\n<body>\n  <button>Click Me!</button>\n</body>\n```\n\n```js\n// Create button variable\nconst button = document.querySelector('button');\n```\n\n---\n\n### Step 3\n## Add a click Listener to the button\n\n### `Element.addEventListener`\n\n```js\n// Create button variable\nconst button = document.querySelector('button');\n\n// Add listener to variable\nbutton.addEventListener('click', greet);\n```\n- Now, `greet()` will run whenever `button` is clicked;\n\n---\n\n## Key Takeaways\n- Listener callback functions are often named after the event they are attached to, like `handleClick`;\n- You will often see Listeners defined with anonymous functions:\n    ```js\n    button.addEventListener('click', function() {\n      console.log('Hi!');\n    });\n    ```\n    - We will not use anonymous functions much but you will see them a lot online;\n\n---\n\n## Further Resources \n- Read: [Function expressions](https://javascript.info/function-expressions) on Javascript.info\n- Watch: Functions in [JavaScript Tutorial for Beginners: Learn JavaScript in 1 Hour](https://www.youtube.com/watch?v=W6NZfCO5SIk) by Mosh\n    - 39:41 [Functions](https://www.youtube.com/watch?v=W6NZfCO5SIk&t=2122s)\n    - 44:22 [Types of Functions](https://www.youtube.com/watch?v=W6NZfCO5SIk&t=2662s)\n- MDN: \n    - [`EventTarget.addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n    - [Event Reference](https://developer.mozilla.org/en-US/docs/Web/Events)\n- Watch: [Introduction to JavaScript Event Listeners](https://youtu.be/EaRrmOtPYTM) by Steve Griffith\n";
const __vite_glob_0_33 = "\n## Changing CSS with Javascript\n### `Element.classList` and CSS Variables\n\n---\n\n## `Element.classList`\nUsing classList is a convenient method of accessing an element's list of classes.\n\n![Example of a classList console log](/images/js/classList-example.png)\n\nWhile `.classList` itself is read-only, a number methods are available to edit an elements classes.\n\n---\n\n## `classList.add()`\nAdds a class to a selected element.\n\nBefore:\n```html\n<body>\n  <h1>Hello world!</h1>\n</body>\n```\n\n```js\nconst body = document.querySelector('body');\nbody.classList.add('dark');\n```\n\nAfter:\n```html\n<body class=\"dark\">\n  <h1>Hello world!</h1>\n</body>\n```\n\n---\n\n## `classList.remove()`\nRemoves a class from a selected element.\n\nBefore:\n```html\n<body class=\"dark\">\n  <h1>Hello world!</h1>\n</body>\n```\n\n```js\nconst body = document.querySelector('body');\nbody.classList.remove('dark');\n```\n\nAfter:\n```html\n<body class=\"\">\n  <h1>Hello world!</h1>\n</body>\n```\n\n---\n\n## `classList.toggle()`\nToggles a class on a selected element. If it exists, it's removed. If it's missing, it's added.\n\nBefore:\n```html\n<body class=\"dark\">\n  <h1>Hello world!</h1>\n</body>\n```\n\n```js\nconst body = document.querySelector('body');\nbody.classList.toggle('dark');\n```\n\nAfter:\n```html\n<body class=\"\">\n  <h1>Hello world!</h1>\n</body>\n```\n\n---\n\n## `classList.replace()`\nReplaces a class with another class.\n\nBefore:\n```html\n<body>\n  <h1 class=\"show\">Hello world!</h1>\n</body>\n```\n\n```js\nconst heading = document.querySelector('h1');\nheading.classList.replace('show', 'hide');\n```\n\nAfter:\n```html\n<body>\n  <h1 class=\"hide\">Hello world!</h1>\n</body>\n```\n\n---\n\n## CSS Variables\n### AKA: CSS Custom Properties\nManipulating CSS Variables with Javascript are often a convenient alternative to changing an element's class names.\n\n---\n\n## Basic Usage\n1. Add a custom property to the `:root` element (the `<html>` element).\n\n    ```css\n    :root {\n      --main-bg-color: brown;\n    }\n    ```            \n\n2. Use custom property elsewhere in your stylesheet using the `var()` CSS function.\n\n    ```css\n    body {\n      background-color: var(--main-bg-color);\n    }\n    ```\n\n---\n\n## Editing CSS variables with Javascript\n\n1. Create a DOM variable of the `:root` element;\n\n    ```js\n    const root = document.querySelector(':root');\n    ```\n2. Change the value of the CSS Variable using `Element.style.setProperty()`:\n\n    ```js\n    root.style.setProperty(\"--main-bg-color\", \"orange\");\n    ```\n\n---\n\n## Further Resources\n### CSS Variables\n- MDN: [Using CSS custom properties (variables)](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)\n- Watch: [CSS Variables in 100 Seconds](https://www.youtube.com/watch?v=NtRmIp4eMjs) by Fireship\n- Watch: [CSS Variables - An introduction to CSS custom properties](https://www.youtube.com/watch?v=PHO6TBq_auI) by Kevin Powell\n<p></p>\n\n### `Element.classList`\n- MDN: [`Element.classList`](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\n- Watch: [Controlling a CSS ClassList with JavaScript](https://www.youtube.com/watch?v=1e9BnA5ZIOk) by Steve Griffith\n";
const __vite_glob_0_34 = "\n## Conditional Code\n### `if...else` and Comparison Operators\n\n---\n\n### Terminology\n\n<dl>\n  <dt>Value type</dt>\n  <dd>The primitive (string, number, boolean, null, undefined) and complex (array, object and function) types of values (plus some others) in Javascript.</dd>\n  <dt>Boolean value type</dt>\n  <dd><code>true</code> or <code>false</code> (there is no maybe)</dd>\n  <dt>Coercion</dt>\n  <dd>When one data type (i.e. string) is converted to another data type (i.e. boolean) in Javascript.</dd>\n</dl>\n\n---\n\n<dl>\n  <dt>Truthy</dt>\n  <dd>A truthy value is a value that is considered <code>true</code> <em>after</em> it's converted (coerced) to a Boolean value.</dd>\n  <dt>Falsy</dt>\n  <dd>A falsy value is a value that is considered <code>false</code> <em>after</em> it's converted (coerced) to a Boolean value.</dd>\n</dl>\n\n\n---\n\n## `if` blocks\nAn `if` block only runs if its expression evaluates to `true`\n\n```js\nif (condition) {\n\n  code to run if condition is true\n\n}\n\nrun some other code\n```\nSee: [MDN - `if...else`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else)\n\n---\n\n## `else` blocks\nAn `else` block only runs if all previous `if` and `else if` blocks have evaluated to `false`.\n\n```js\nif (condition) {\n\n  code to run if condition is true\n\n} else {\n\n  run some other code instead\n\n}\n\n```\n\n---\n\n## `else if` blocks\nAn `else if` block only runs if its expression evaluates to `true` AND all `if` and `else if` blocks before it have evaluated to `false`.\n\n```js\nif (condition) {\n\n  code to run if condition is true\n\n} else if(condition) { \n\n  code to run if condition is true \n  AND the previous blocks evaluate to false\n\n} else {\n\n  run some other code instead\n\n}\n```\n\n---\n\n## Comparison Operators\n\n---\n\n<dl>\n  <dt><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality\">Equality</a> (<code>==</code>)</dt>\n  <dd>The equality operator checks whether its two operands are equal. Unlike the strict equality operator, <strong>it attempts to convert and compare operands that are of different types</strong>. </dd>\n  <br>\n  <dt><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict Equality</a> (<code>===</code>)</dt>\n  <dd>The strict equality operator checks whether its two operands are equal. Unlike the equality operator, the strict equality operator <strong>always considers operands of different types to be different</strong>.</dd>\n</dl>    \n\n---\n\n## Examples\nEquality\n```js\nconsole.log(1 == '1'); // true\n```\n\nStrict Equality\n```js\nconsole.log(1 === '1'); // false\n```\n\n---\n\n### Key Takeaways\n- Use `===` when testing for equality (it's safer). Use `==` once you understand truthiness (or you just can't get the job done with `===`).\n- Any value can be converted to a Boolean value:\n\n    ```js\n    myBool = Boolean(myVar); // Method 1\n    myBool = !!myVar; // Method 2\n    ```\n\n---\n\n<dl>\n  <dt><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than</a> (<code>></code>)</dt>\n  <dd>Returns true if the left operand is greater than the right operand, and false otherwise. </dd>\n</dl>\n\n```js\nconsole.log(5 > 3); // true\n\nconsole.log(3 > 3); // false\n\nconsole.log('ab' > 'aa'); // true\n```\n\n---\n\n<dl>\n  <dt><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal</a> (<code>>=</code>)</dt>\n  <dd>Returns true if the left operand is greater than or equal to the right operand, and false otherwise.</dd>\n</dl>\n\n```js\nconsole.log(5 >= 3); // true\n\nconsole.log(3 >= 3); // true\n\nconsole.log('ab' >= 'aa'); // true\n```\n\n---\n\n<dl>\n  <dt><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than</a> (<code><</code>)</dt>\n  <dd>Returns true if the left operand is less than the right operand, and false otherwise.</dd>\n</dl>\n\n```js\nconsole.log(5 < 3); // false\n\nconsole.log(3 < 3); // false\n\nconsole.log('aa' < 'ab'); // true\n```\n\n---\n\n<dl>\n  <dt><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal</a> (<code><=</code>)</dt>\n  <dd>Returns true if the left operand is less than or equal to the right operand, and false otherwise.</dd>\n</dl>\n\n```js\nconsole.log(5 <= 3); // false\n\nconsole.log(3 <= 3); // true\n\nconsole.log('aa' <= 'ab'); // true\n```\n\n---\n\n## Logical Operators\n\n---\n\n<dl>\n  <dt><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND</a> (<code>&&</code>)</dt>\n  <dd>Returns `true` if and only if all the operands are true.</dd>\n</dt>\n\n```js\nconsole.log(true && true); // true\n\nconsole.log(true && false); // false\n\nconsole.log(3 > 0 && -2 > 0); // true && false -> false\n```\n\n---\n\n<dl>\n  <dt><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR</a> (<code>||</code>)</dt>\n  <dd>Returns `true` if one or more of its operands is `true`.</dd>\n</dt>\n\n```js\nconsole.log(false || false); // false\n\nconsole.log(true || false); // true\n\nconsole.log(3 > 0 || -2 > 0); // true && false -> true\n```\n\n---\n\n<dl>\n  <dt><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT</a> (<code>!</code>)</dt>\n  <dd>Converts truthy to falsy and vice versa.</dd>\n  <dt><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality</a> (<code>!=</code>)</dt>\n  <dd>The inequality operator checks whether its two operands are not equal. <strong>It attempts to convert and compare operands that are of different types.</strong></dd>\n  <dt><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict Inequality</a> (<code>!==</code>)</dt>\n  <dd>The strict inequality operator checks whether its two operands are not equal. <strong>It always considers operands of different types to be different.</strong></dd>\n</dl>  \n\n---\n\n## Examples\nInequality\n```js\nconsole.log(0 != false); // false\n```\n\nStrict Inequality\n```js\nconsole.log(0 !== false); // true\n```\n\n---\n\n## Further Resources\n- [Boolean values](https://developer.mozilla.org/en-US/docs/Glossary/Boolean)\n- [Making decisions in your code - conditionals](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals)\n- [Comparison operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#comparison_operators)\n\n";
const __vite_glob_0_35 = "\n# Handling Errors\n## Syntax vs Logic Errors\n\n---\n\n- **Syntax errors**\n    - Errors in the rules of writing JS\n    - Easiest to debug\n- **Logic errors**\n    - Code is broken but there are no errors\n    - Hardest to debug; sometimes takes hours\n\n---\n\n## Is it a syntax or logic error?\n- Syntax errors are explicit and usually give you a filename and line number;\n    ![Variable Undefined in Chrome](/images/errors/const-unassigned-chrome.png)\n- If there's no indication of an error, it's probably a logic error.\n\n---\n\n## Find errors early with \"Squigglies\"\nVS Code is your friend. It will underline errors with red, yellow and blue \"Squigglies\":\n\n![Example of VS Code error squigglies](/images/errors/squiggly-underline.png)\n\nHover over the squiggly for hints on what's wrong:\n\n![Example of VS Code squiggly details](/images/errors/squiggly-details.png)\n\n---\n\n## Diagnosing Syntax Errors\n1. Check the console for errors;\n    ![Example of const re-assignment error](/images/errors/const-reassignment-chrome.png)\n2. Find the file and line number of the error;\n3. Look for the \"Squiggly\" in VS Code:\n    ![Example of VS Code error squigglies](/images/errors/squiggly-underline.png)\n4. If you still can't figure it out, copy and paste the error and search online. You will often find an answer on [Stack Overflow](https://stackoverflow.com/).\n\n---\n\n## Common Syntax Errors\n### Variable declaration and assignment\n\n---\n\n### Problem: Using a variable that does not exist\nChrome\n\n![Variable Undefined in Chrome](/images/errors/var-undefined-chrome.png)\n\n### Solutions\n- Declare a variable with `const` or `let` before use.\n- Double-check spelling of the variable name\n    ```js\n    const fullName = 'Buffy the Vampire Slayer';\n    console.log(fullname); // error\n    ```\n\n---\n\n### Problem: `const` declared but not assigned\n\nChrome\n\n![Variable Undefined in Chrome](/images/errors/const-unassigned-chrome.png)\n\n### Solutions\n- When using `const`, assign a value with `=`, OR\n    ```js\n    const age; // error\n    ```\n- Declare the variable with `let` instead\n    ```js\n    let age; // Totally fine!\n    ```\n\n---\n\n### Problem: Re-assigning a `const` variable\nChrome\n\n![Variable Undefined in Chrome](/images/errors/const-reassignment-chrome.png)\n\n### Solution\n- Declare the variable with `let` instead:\n    ```js\n    const age = 46;\n    age = 47; // error\n    ```\n    ```js\n    let age = 46;\n    age = 47; // Totally fine!\n    ```\n---\n\n## Dealing with the error stack\nSometimes an error will often cascade to multiple errors throughout an application:\n\n![Example of syntax error in terminal](/images/errors/error-stack.png)\n\n- You can ignore most of the extra errors;\n- Look for references to your filename;\n- Depending on the situation, the real error will either be at the top or bottom of the stack\n\n---\n\n## Debugging Logic Errors\nThere will be no error message, so these are trickier.\n1. Understand what you're trying to accomplish.\n2. Understand what your code is doing.\n3. Form a hypothesis or two before looking at code.\n4. Identify key variables or conditions with `console.log()`.\n5. When in doubt: find a 2nd pair of eyes;\n6. If no one is available: try [Rubber Duck Debugging](https://rubberduckdebugging.com/)\n\nSee: <a href=\"https://www.dummies.com/article/technology/programming-web-design/html5/how-to-resolve-javascript-logic-errors-for-html5-and-css3-programming-156883\">How to Resolve JavaScript Logic Errors</a> for more\n\n---\n\n## Tony's most common logic error\n- He's editing/running the wrong file.\n\n---\n\n## Further resources\n- MDN: [What went wrong? Troubleshooting JavaScript](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_went_wrong)\n- [15 Common Beginner JavaScript Mistakes](https://www.jamesqquick.com/blog/15-common-beginner-javascript-mistakes/) \n- Video: [Best Debugging Tips For Beginners](https://www.youtube.com/watch?v=gaminoBsQx0)\n    - [Companion Video](https://www.youtube.com/watch?v=H0XScE08hy8)\n";
const __vite_glob_0_36 = "\n# Handling Exceptions\n## `try`/`catch` with `async`/`await` \n---\n\n## Types of Errors \n- **Syntax errors**\n    - Errors in the rules of writing JS\n    - Easiest to debug\n- **Run-time errors**\n    - Code technically correct but can't run\n    - Example: File/library/module not found\n- **Logic errors**\n    - Code is broken but there are no errors\n    - Hardest to debug; sometimes takes hours\n\n---\n\n## Terminology\n<dl>\n  <dt>Exception</dt>\n  <dd>An error object created by Javascript when there's a run-time error. It contains a description of the error and where it occured.</dd>\n  <dt>Throw an Exception</dt>\n  <dd>The act of generating an exception. Developers can write validation code that throws an exception when it otherwise would not have.</dd>\n</dl>\n\n---\n## Terminology\n<dl>\n  <dt><code>try</code></dt>\n  <dd>A clause that runs code that can generate exceptions. </dd>\n  <dt><code>catch</code></dt>\n  <dd>A clause that catches exceptions that are thrown. </dd>\n  <dt><code>throw</code></dt>\n  <dd>A statement that manually generates exceptions.</dd>\n</dl>\n\n---\n\n## Exceptions with Promises\n- Promises can either succeed (be resolved) or fail (be rejected).\n- Rejected Promises will throw an exception that can be caught with a `catch` clause.\n\n---\n\n### Considerations with `fetch()`\n- `fetch()` _only_ rejects a Promise (i.e. throws an exception) if there's a network error (i.e. server not found).\n- An exception is _not_ thrown when it encounters a `404 Not Found`, or similar status error.\n- `fetch()` returns a `Response.ok` property that is `true` if the status code is 200-299. `false`, otherwise.\n\n---\n\n### Example: `fetch()` with no error Handling\n\n```js\nconst fetchData = async () => {\n  const response = await fetch('url-to-somewhere');\n  const data = await response.json();\n\n  console.log(data);\n}\n```\n\n---\n\n### Example: `fetch()` with `try` / `catch`\n\n```js\nconst fetchData = async () => {\n  try {\n    const response = await fetch('url-to-somewhere');\n    const data = await response.json();\n\n    console.log(data);\n    \n  } catch (error) {\n      console.error(error);\n  }\n}\n```\n\n---\n\n### Example: `fetch()` with `try` / `catch` and `throw`\n\n```js\nconst fetchData = async () => {\n  try {\n    const response = await fetch('url-to-somewhere');\n    if (!response.ok) { \n        throw new Error(response.statusText);\n    }\n    const data = await response.json();\n\n    console.log(data);\n  } catch (error) {\n      console.error(error);\n  }\n}\n```\n---\n\n## Further Resources\n- [The Basics of Exception Handling in JavaScript](https://www.section.io/engineering-education/exception-handling-in-javascript/) \n- MDN: [`try`/`catch` blocks](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch)\n- Video: [try, catch, finally, throw - error handling in JavaScript](https://www.youtube.com/watch?v=cFTFtuEQ-10) by Free Code Camp\n\n";
const __vite_glob_0_37 = "\n## Statements vs Expressions\n### The basics of JS syntax\nSee: [Statements Vs. Expressions](https://www.joshwcomeau.com/javascript/statements-vs-expressions/) by Josh W Comeau\n---\n\n### Terminology\n\n<dl>\n  <dt>Expression</dt>\n  <dd>Any piece of code that produces (returns) a value.</dd>\n  <dt>Statement</dt>\n  <dd>A JavaScript program is a sequence of statements. Each statement is an instruction for the computer to do something. A statement can contain multiple expressions (<a href=\"https://www.joshwcomeau.com/javascript/statements-vs-expressions/\">source</a>).</dd>\n</dl>\n\n---\n\n## Expressions\nA piece of code that returns a value.\n\n- `1` → produces `1`\n- `\"hello\"` → produces `\"hello\"`\n- `5 * 10` → produces `50`\n- `num > 100` → produces either `true` or `false`\n- 1 == '1' → produces `true`\n- 1 === '1' → produces `false`\n\n---\n\n## Statements\nA JavaScript program is a sequence of statements. Each statement is an instruction for the computer to do something.\n\nExamples:\n\n```js\nlet hi = 5;\n```\n\n```js\nif (hi > 10) {\n  // More statements here\n}\n```\n\n---\n\n## Statements contain expressions\n\nStatements are the rigid structure that holds our program together, while expressions fill in the details.\n\nStatements often have \"slots\" for expressions. We can put any expression we like into those slots.\n\n---\n\nFor example, declaring a variable has an expression slot:\n\n```js\nlet hi = /* some expression */;\n```\n\nWe can use any of the expressions we saw earlier in that slot:\n\n```js\nlet hi = 1;\nlet hi = \"hello\";\nlet hi = 5 * 10;\nlet hi = num > 100;\nlet hi = 1 == '1';\nlet hi = 1 === '1';\n```\n\n---\n\n## A handy trick\n\nWant to know whether a chunk of JS is an expression or a statement? Type it in the console. \n\nIf it returns `undefined`, it's a statement:\n\n![Statement in the console](/images/js/statement.png)\n\nOtherwise, it's an expression:\n\n![Expression in the console](/images/js/expression.png)\n---\n\n## Conditional Statements\nThe `condition` in an `if` statement is an expression.\n\n```js\nif (condition) {\n\n  // More statements run if condition is true\n\n}\n```\nJavascript will **convert** (i.e. coerce) the value of the condition to a `true` or `false` value.\n\n---\n\n### Expressions are Interchangeable\nAny expression can be used as an `if` condition, including the ones we saw earlier:\n\n```js\nif (1) {\n  // 1 is true\n}\n\nif (\"hello\") {\n  // \"hello\" is true\n}\n\nif (5 * 10) {\n  // 5 * 10 -> 50 -> is true\n}\n\nif (num > 100) {\n  // Can be true or false, depending on num\n}\n\nif (1 == '1') {\n  // 1 == '1' is true\n} \n\nif (1 === '1') {\n  // 1 === '1' is false\n} \n```\n\n---\n\n## Variables and Literals\nVariables express the value that has been assigned to them:\n\n```js\nconst num = 15;\n\nnum; // expresses 15\n```\n\nLiterals express themselves:\n\n```js\n'1'; // Expresses '1'\n10; // Expresses 10\n'Deadpool' // Expresses 'Deadpool'\n```\n\n---\n\n## Operators are expressions\nAll of the operators we've covered are actually functions that return values, making them expressions.\n\n- **Arithmetic**: return numbers (or `NaN`)\n- **Comparison**: return `true` or `false`\n- **Logical**: return `true` or `false`\n\n---\n\n## Order of Operations\nWhen seeing a mix of operators it helps to know which order they are evaluated. \n\nFrom first to last:\n1. Logical **NOT** (`!`)\n2. **Arithmetic** (each in BEDMAS order)\n3. **Comparison** (`===`, `<`, `>=`, etc)\n4. Logical **AND** (`&&`), **OR** (`||`)\n\nSee: [Operator Precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table)\n\n---\n\n## Further Learning\n- [Statements Vs. Expressions](https://www.joshwcomeau.com/javascript/statements-vs-expressions/) by Josh W Comeau\n- Stack Overflow: [Difference between a statement and an expression?](https://stackoverflow.com/questions/12703214/javascript-difference-between-a-statement-and-an-expression)\n- MDN: [Operator Precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table)\n";
const __vite_glob_0_38 = "\n# Flowcharts\n## Diagraming a Process\n\n---\n\n## Terminology\n<dl>\n  <dt>Algorithm</dt>\n  <dd>A repeatable, step-by-step definition of a process, system or task.</dd>\n  <dt>Flowchart</dt>\n  <dd>A schematic representation of an algorithm or process.</dd>\n</dl>\n\n---\n\n## Example Flowchart\n![Start-Stop symbol](/images/flowchart/flowchart-example.png)\n---\n\n## Start/End\n![Start-Stop symbol](/images/flowchart/start-stop.png)\n- Shape is a rounded rectangle;\n- Start is required and should always be the same;\n- Start always should be the first block;\n- Flowchart may have no End or multiple Ends.\n\n---\n\n## Process\n![Start-Stop symbol](/images/flowchart/process.png)\n- Shape is a rectangle;\n- Involves a single action or verb in the flowchart.\n\n---\n\n## Input/Output\n![Start-Stop symbol](/images/flowchart/input-output.png)\n- Shape is a parallelogram;\n- Indicates a manual operation is needed.            \n\n---\n\n## Decision\n![Start-Stop symbol](/images/flowchart/decision.png)\n- Shape is a rhombus or diamond;\n- Outcome is a Yes or No;\n- In general: Yes should go left-right and No should go down.\n\n---\n\n## Sub-process\n![Start-Stop symbol](/images/flowchart/sub-process.png)\n- Indicate an independent process with its own Start and End;\n- In programs, this is often a separate function.\n\n---\n\n## Arrow\n![Start-Stop symbol](/images/flowchart/arrow.png)\n- Indicate the flow of the chart;\n- Are drawn from the output of one symbol to the input of another;\n- Only one arrow can represent an output;\n- Multiple arrows can represent inputs.\n\n---\n\n## Questions to ask\n- What's the purpose of the flowchart?\n    - Test an idea?\n    - Communication with a team?\n    - Project documentation?\n    - Understanding of a large system?\n- Where do you start?\n- What is the final output of the process, system or task?\n- What's trivial enough to not be included in the flowchart?\n\n---\n\n## Further Learning\n- Article: [Introduction to Flowcharts](https://www.mindtools.com/augmkip/flow-charts)\n- Video: [Introduction to Creating Flowcharts](https://www.youtube.com/watch?v=SWRDqTx8d4k)\n- Tool: [LucidChart](https://www.lucidchart.com/pages/)\n";
const __vite_glob_0_39 = "\n## `for` Loops\nThe `for` loop is ubiquitous in the programming world. Almost every programming language has one and many employers will use a `for` loop challenge in their hiring process.\n---\n\n### Terminology\n<dl>\n  <dt>Iteration</dt>\n  <dd>The same procedure repeated multiple times.</dd>\n  <dt>Iterator</dt>\n  <dd>A counter variable (usually <code>i</code>) that keeps track of which iteration the program is in.</dd>\n  <dt>Iterable</dt>\n  <dd>An object/variable which can be looped over or iterated over with the help of a <code>for</code> loop.</dd>\n</dl>\n---\n\n### The `for` loop syntax\n\n\n```js\n\nfor ([initializer]; [condition]; [increment]) {\n  // Your code here\n}            \n\n```\n\nTo [Print 1-to-100 with a for Loop](https://gist.github.com/acidtone/e87aa5564ae1b286beca66b07d52550f).\n\n```js\nfor (let i = 1; i <= 100; i++) {\n  console.log(i);\n}\n```\n\n---\n\n<dl>\n  <dt>Initializer</dt>\n  <dd>This expression usually creates one or more loop iterators (counters), but the syntax allows an expression of any degree of complexity.</dd>\n  <dt>Condition</dt>\n  <dd>If the value of condition expression is true, the loop iteration executes. If the value of condition is false, the loop terminates.</dd>\n  <dt>Increment</dt>\n  <dd>The loop counter increments. This expression is usually i++ but the syntax allows an expression of any degree of complexity.</dd>\n</dl>\n\n---\n\n### `for` Loop Flowchart\n\n![Flowchart of a for loop](/images/js/for-loop-flowchart.png)\n\nSource: [JavaScript for loop (with examples)](https://www.programiz.com/javascript/for-loop)\n\n---\n\n### The `for` loop process\n1. The `initializer` expression executes and creates one or more loop counters. The syntax allows an expression of any degree of complexity but is usually `i = 0` or `i = 1`. \n    - it's convention to name your iterator `i`.\n\n---\n\n### The `for` loop process\n2. The `condition` expression is evaluated. \n    - If the value of `condition` is `true`, the loop statements within the code block execute (Step 3). \n    - If the value of `condition` is `false`, the `for` loop terminates and the script proceeds to the next line after the loop.\n\n---\n\n### The `for` loop process\n\n3. The code block executes. Any counters or variables that were initialized are available within the code block.\n4. The `increment` expression is executed. This usually increases the counter by 1 (`i++`).\n5. Control returns to Step 2.\n\n---\n\n### Key Takeaways\n- It's convention to name your counter (iterator) variable `i`.\n- Variables declared inside the `for` loop are reset on each iteration.\n- Variables declared inside the `for` loop are not available outside the loop.\n- Use `let` when initializing `i`. `const` won't work if `i` is incremented or overwritten.\n- Be careful when defining your `condition`. It's easy to be \"one off\" when choosing comparison operators such as `<` and `<=`.\n\n---\n\n## `break` and `continue`\n### Stopping and skipping\n\n---\n\n### `break`\nThe `break` statement \"jumps out\" of a loop.\n\n```js\nfor (let i = 1; i <= 10; i++) {\n\n  if (i === 4) { \n    break; \n  }\n  \n  console.log(i);\n\n}\n\n// Output: 1, 2, 3\n```\n\n---\n\n### `continue`\nThe continue statement skips one iteration in the loop.\n\n```js\nfor (let i = 1; i <= 10; i++) {\n\n  if (i === 4) { \n    continue; \n  }\n  \n  console.log(i);\n\n}\n\n// Output: 1, 2, 3, 5, 6, 7, 8, 9, 10\n```\n\n---\n\n## Further Resources\n- MDN: [`for` statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for_statement)\n- Gist: [Print 1-to-100 with a `for` Loop](https://gist.github.com/acidtone/e87aa5564ae1b286beca66b07d52550f)\n- Video: [`for` Loop](https://www.youtube.com/watch?v=s9wW2PpJsmQ) by Mosh Hamedani\n- [10 Simple Javascript For-Loop Exercises](https://avantutor.com/blog/10-simple-javascript-for-loop-exercises/)\n";
const __vite_glob_0_40 = '\n# Forms and controls\n<dl>\n  <dt>Form control:</dt>\n  <dd>A User Interface thingy that is a point of connection between the user and the browser.</dd>\n</dl>\n\n---\n\n## Accessible forms\n### It\'s important not to screw this up\n\n---\n\n## Form Control Labels\nWith few exceptions, all form controls should have a `<label>` element for accessibility.\n\n```html\n<label for="username">Username:</label>\n<input type="text" name="username" id="username">\n```\n- `for` must be the same as `id` of the control;\n- Properly linked `label` elements will:\n    - be read by screen readers;\n    - focus its form control when clicked.\n\n---\n\n## Fieldsets and Legends\nRelated fields should be wrapped in a `<fieldset>` with an accompanying `<legend>`. \n\n```html\n<fieldset>\n  <legend>Subscribe to our Newsletter!</legend>\n  <div>\n    <label for="email">Email:</label>\n    <input type="email" name="email" id="email">\n  </div>\n</fieldset>\n```\n- `<legend>` is read by screen readers for extra instructions;\n- When in doubt, wrap your form controls in a `<fieldset>` with `<legend>`.\n\n---\n\n## Radio button groups\nRadio button and checkbox groups should always have a fieldset and legend to define general instructions.\n```html\n<fieldset class="radio">\n  <legend>Choose a favourite pet:</legend>\n  <div>\n    <label for="dog">Dog</label>\n    <input type="radio" name="fave" value="dog" id="dog">\n  </div>\n  <div>\n    <label for="cat">Cat</label>\n    <input type="radio" name="fave" value="cat" id="cat">\n  </div>\n</fieldset>\n```\n- `name` translates to the variable name in Javscript;\n- Radio button groups should have the same `name`.\n\n---\n\n## Required fields\n![Example of required fields](/images/html/required-fields.png)\n- Required fields should be labeled as such\n- Use the `required` attribute to prevent a form from submitting an empty field.\n\n---\n\n## More best practices\n- Keep forms short;\n- Visually group related labels and fields;\n- Present fields in a single column layout;\n- Don\'t use placeholder text instead of `<label>`;\n- Explain any input or formatting requirements such as for password creation;\n- Avoid Reset and Clear buttons;\n- Provide highly visible and specific error messages.\n  \n---\n\n## Forms and Javascript\n### Tips and considerations\n\n---\n\n## When to use a `<form>`\nThe `<form>` element is not required to use form controls but it is recommended if:\n- You are submitting data to a server;\n- There are many form controls:\n    - `<form>` objects provide convenient access to their form data instead of creating a variable for every form control;\n- The controls are triggered by a Submit button (instead of a checkbox click).\n\n---\n\n## `<form>` Considerations\nThe `<form>` element is one of the oldest and comes with behaviour that\'s both awesome and annoying.\n\n---\n\n## Submitting forms\nThe `submit` event is attached to the `form`, not the submit button.\n\n```js\nconst form = document.querySelector(\'form\');\nform.addEventListener(\'submit\', handleSubmit);\n```\n- This is better for accessibility since forms can be submitted without a `click` event;\n- This assumes a proper submit button is present.\n\n---\n\n## Submit buttons\nForms can be submitted with either:\n\nAn `<input>` element:\n```html\n<input type="submit" value="Submit Me!">\n```\n\nOr a `<button>` with a `type` of `submit`:\n```html\n<button type="submit">Submit Me!</button>\n```\n- Submit buttons should be inside the `<form>`;\n- For multiple forms use the `form` attribute to bind a button to a `<form>`\'s `id`\n\n---\n\n## Preventing Page Refreshes\nSubmitted forms will refresh the page by default. You need to use `event.preventDefault()` to override this.\n```js\nconst form = document.querySelector(\'form\');\n\nconst handleSubmit = function(event) {\n  event.preventDefault();\n}\n\nform.addEventListener(\'submit\', handleSubmit);\n```\n- The `event` object needs to be passed as an argument to the event handler;\n- `event` is an object created by the browser which you have no control over.\n\n---\n\n## Accessing form values\nUsing a form removes the need for creating variables for individual variables for form controls.\n```html\n<fieldset>\n  <legend>Subscribe to our Newsletter!</legend>\n  <div>\n    <label for="email">Email:</label>\n    <input type="email" name="email" id="email">\n  </div>\n</fieldset>\n```\n```js\nconst handleSubmit = function(event) {\n  event.preventDefault();\n\n  console.log(form.email.value); // tony.grimes@sait.ca\n}\n```\n\n---\n\n## Further Resources\n- [Website Forms Usability: Top 10 Recommendations](https://www.nngroup.com/articles/web-form-design/)\n- Watch: [HTML Forms](https://www.youtube.com/watch?v=YwbIeMlxZAU) by Net Ninja\n- MDN: [`<form>`: The Form element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form)\n- [Basic native form controls](https://developer.mozilla.org/en-US/docs/Learn/Forms/Basic_native_form_controls):\n    - [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)\n        - text, number, email, range, etc\n    - [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select)\n    - [`<textarea>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)\n';
const __vite_glob_0_41 = "\n## Introduction to Functions\n### Portable, Re-usable Code\n\n---\n\n## Why do we use functions?\n1. To make code re-usable by removing repetition\n    - Functions are written once and can invoked multiple times in your apps\n2. To make code more portable and sharable\n    - Modules and libraries are actually functions\n3. To make code safer\n    - Variables declared inside functions are block scoped\n4. To delay code execution until an event happens\n    - Example: do something when a button is clicked\n\n---\n### Terminology\n\n<dl>\n  <dt>Function declaration</dt>\n  <dd>When a function is first created like any other variable.</dd>\n  <dt>Function invocation</dt>\n  <dd>When you run a function inside your application.</dd>\n</dl>\n\n---\n\n## Declaring functions\nThere are a few ways to declare functions that you will see online.\n1. Function Expressions\n2. Function Statements\n\n---\n\n## Function Expression\n\n### ES5\nWe will use this option for the first few days:\n\n```js\nconst greet = function() {\n  console.log('Hi!');\n};\n```\n\n### ES6 (Fat arrow)\nMore modern but also harder to read (for now):\n\n```js\nconst greet = () => {\n  console.log('Hi!');\n}\n```\n\n---\n\n## Function statement\nA classic syntax common to many languages but is not used in this course. Only mentioned here because you will see this method online.\n\n```js\nfunction greet() {\n  console.log('Hi!');\n}\n```\n\n\n---\n\n## Function invocation\nOnce a function has been defined, it an be invoked/called/run multiple times in your code.\n\n### Step 1: Declare the function\n```js\nconst greet = function(){\n  console.log('Hi!');\n}\n```\n\n### Step 2: Invoke the function\n```js\ngreet(); // \"Hi!\"\n```\n\n---\n\n## Terminology\n<dl>\n  <dt>Function Parameter</dt>\n  <dd>A named value that a function accepts as (eventual) input. Parameters are defined when the function is created.</dd>\n  <dt>Function Argument</dt>\n  <dd>The actual value passed to a function when it is invoked.</dd>\n</dl>\n\n---\n\n## Example\n\nIf a function is defined with **parameters**:\n\n```js\nconst greet = function(name) {\n  console.log(`Hi, ${name}!`);\n}\n```\n\nIt's invoked with **arguments** (but doesn't have to be):\n\n```js\ngreet('Tony'); // Hi, Tony!\n```\n\n---\n\n## Key Takeways\n- _Parameter_ is used when _declaring_ a function. \n- _Argument_ is used when _invoking_ a function. \n- Javascript (by default) won't complain if you don't pass an argument when a parameter is defined.\n\n---\n\n## Return values\nFunctions can (optionally) return values when they are invoked using the `return` keyword.\n\n```js\nconst greet = function() {\n  return 'Hi!';\n}\n\nconst greeting = greet(); // \"Hi!\"\n```\n\n---\n\n## Function Scope\nOutside variables are available inside a function:\n\n```js\nconst name = 'Tony';\n\nconst greet = function() {\n  console.log(`Hi, ${name}!`); // \"Hi, Tony!\"\n}\n\ngreet();\n```\n\n---\n\nBut variables declared inside a function are private and are not available outside the function:\n\n```js\nconst greet = function() {\n  const name = 'Tony';\n\n  console.log(`Hi, ${name}!`); // \"Hi, Tony!\"\n}\n\ngreet();\n\nconsole.log(name) // Syntax error\n```\n\n---\n\n## Further Learning\n\nMozilla Developer Network\n- [Functions - reusable blocks of code](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions)\n- [Build your own function](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Build_your_own_function)\n- [Function return values](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values)\n\nVideos by Steve Griffith\n- [Introduction to Functions in JavaScript](https://youtu.be/W6QaDqud66Y)\n- [JavaScript Function Parameters](https://youtu.be/dxbsN6_C5PI)\n- [JavaScript Function Return Statements](https://youtu.be/qed2cjdF-30)\n";
const __vite_glob_0_42 = "\n# Higher Order Array Methods\n## Starting with `.forEach()`\n\n---\n\n## Terminology\n<dl>\n  <dt>Array method</dt>\n  <dd>A function that's available to all Javascript arrays. Example: <code>hobbies.join(', ')</code>.</dd>\n  <dt>Higher order Function</dt>\n  <dd>A function that accepts other functions as parameters. <code>.addEventListener()</code> is a higher order function.</dd>\n  <dt>Callback function</dt>\n  <dd>A function passed as an argument to a (higher order) function.</dd>\n</dl>\n---\n\n## [`Array.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\nAn array method that loops through each item and invokes `callback(item)` at each iteration.\n\n```js\nconst moods = ['happy', 'sad', 'excited'];\n\nconst callback = function(item) {\n  console.log(item);\n}\n\nmoods.forEach(callback);\n// happy\n// sad\n// excited\n```\n- The value of the current array `item` is passed as an argument to the `callback`.\n\n---\n\n## Optional Arguments\nMany looping methods will optionally pass the current array `index` to the `callback`.\n\n```js\nconst moods = ['happy', 'sad', 'excited'];\n\nconst callback = function(item, index) {\n  console.log(index);\n}\n\nmoods.forEach(callback);\n// 0\n// 1\n// 2\n```\n- Both `item` and `index` can have a name of your choice.\n\n---\n\n## Example\n### Print an unordered list\n```js\nconst moods = ['happy', 'sad', 'excited'];\n\n// Create an empty accumulator variable\nlet output = '';\n\n// Create a callback that adds each list item to `output`\nconst handleItem = function(item) {\n  output += `<li>${item}</li>`;\n}\n\n// Invoke the callback on each array item\nmoods.forEach(handleItem);\n\n// Print the output to the page as an unordered list\ndocument.querySelector('body').innerHTML = `<ul>${output}</ul>`;\n\n```\n\n---\n\n## Key Takeaways with `.forEach()`\n- It does not return a value;\n- Using the `return` keyword in your `callback` will not do anything;\n- While you can break out of the loop, it's not recommended. There is probably another array method better suited for your purpose.\n\n---\n\n## `for` vs `Array.forEach()`\nUsing `for`:\n```js\nfor (let i = 0; i < hobbies.length; i++) {\n  console.log(hobbies[i]);\n}\n```\nUsing `Array.forEach()`:\n```js\nmoods.forEach(function(item) {\n  console.log(item);\n});\n```\nMost implementations of higher order functions use anonymous callback functions.\n\n---\n\n## Which is best?\n- Use `for` when there's no array to loop though;\n- Although `for` is a valid way to loop through an array, it's prone to bugs:\n    ```js\n    // This loop runs one too many times\n    for (let i = 0; i <= hobbies.length; i++) {\n      // last loop: hobbies[i] is undefined\n      console.log(hobbies[i]); \n    }\n    ```\n- In general, if you're looping through an array, the preferred method is to use `Array.forEach()`;\n    - For looping through a String as an array, use `for` (there's no `String.forEach()`).\n\n---\n\n## Other useful higher order array methods\n\n---\n\n## [`Array.filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\nLoops through an array and returns an array of filtered elements.\n```js\nconst words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];\n\nconst handleFilter = function(word) {\n\n  if (word.length > 6) {\n    // word is added to result\n    return true;\n  } else {\n    // word is NOT added to result\n    return false;\n  }\n\n}\n\nconst result = words.filter(handleFilter);\n// expected output: Array [\"exuberant\", \"destruction\", \"present\"]\n```\n---\n\n## Common Syntax Shortcuts\nBefore:\n```js\nconst handleFilter = function(word) {\n  if (word.length > 6) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconst result = words.filter(handleFilter);\n```\nAfter:\n```js\nconst result = words.filter(word => word.length > 6);\n```\nThese examples have the same output.\n\n---\n\n## Shortcuts in detail\nThe `if`/`else` statements are redundant:\n```js\nconst handleFilter = function(word) {\n  if (word.length > 6) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\nAfter:\n```js\nconst handleFilter = function(word) {\n  return word.length > 6;\n}\n```\n\n---\n\n### Shortcuts in detail\nAnonymous functions are often used in industry:\n```js\nconst handleFilter = function(word) {\n  return word.length > 6;\n}\n\nconst result = words.filter(handleFilter);\n```\nAfter:\n```js\nconst result = words.filter(function(word) {\n  return word.length > 6;\n});\n```\nUsing ES6 fat arrow syntax:\n```js\nconst result = words.filter(word => {\n  return word.length > 6;\n});\n```\n\n---\n\n### Shortcuts in detail\nWhen the body of a function can be put on one line, the `{}` and `return` can be omitted:\n```js\nconst result = words.filter(function(word) {\n  return word.length > 6;\n});\n```\nAfter:\n```js\nconst result = words.filter(word => word.length > 6);\n```\n\n---\n\n### Back to \n## Useful Higher Order Methods\nThese examples will use some of the previous shortcuts.\n\n---\n\n## [`Array.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\nLoops through an array and returns a new array containing items returned at each iteration of the loop.\n\n```js\nconst numbers = [1, 4, 9, 16];\n\n// pass a function to map that squares each item\nconst numberSquared = array.map(function(number) {\n  return number * 2;\n});\n\nconsole.log(numberSquared);\n// expected output: Array [2, 8, 18, 32]\n```\n\n---\n\n## [`Array.find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\nReturns the first element that satisfies the provided testing function. Otherwise, `undefined` is returned.\n\n```js\nconst numbers = [5, 12, 8, 130, 44];\n\nconst foundNumber = numbers.find(function(number) {\n  return number > 10;\n});\n\nconsole.log(foundNumber);\n// expected output: 12\n```\n- The loops ends when the callback first returns `true`;\n- This method is very handy when you need to find a single object in an array of objects.\n\n---\n\n## Key Takeaways\n### With `.filter()`, `.map()` and `.find()`\n- They each loop through their array;\n- They each return a value:\n    - `.filter()`/`.map()` returns and Array\n    - `find()` returns an Array item\n- The callback function returns `true` or `false`\n    - `.filter()`/`.map()`: adds item to result on `true`;\n    - `find()`: returns the current item when true and quits the loop.\n\n\n---\n\n## Further Resources\n- MDN: [`Array.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n    - Youtube: [JavaScript Array forEach Method](https://www.youtube.com/watch?v=159EAISAxwg)\n- MDN: [`Array.filter()`]((https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter))\n    - Youtube: [JavaScript Array filter method](https://www.youtube.com/watch?v=WrB_--bVbbs)\n- MDN: [`Array.map()`]((https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map))\n    - Youtube: [JavaScript Array map method](https://www.youtube.com/watch?v=hfYa4ugeyuc)\n- MDN: [`Array.find()`]((https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find))\n    - Youtube: [Array find() and findIndex() Methods](https://www.youtube.com/watch?v=9b6gxQZHvis)\n";
const __vite_glob_0_43 = '\n# Javascript Basics\n## The Browser Behaviour Layer\n\n---\n\n### Review\n## The Browser Triad\n\n---\n\n## HTML \n### Content\nThe markup language that we use to structure and give meaning to our web content, for example:\n- defining page elements (nav, headings, etc)\n- embedding media (images, videos, audio, etc).\n- managing connected files (`.css`, `.js`, `.png`, etc)\n\n---\n\n## CSS \n### Presentation\nA language of style rules that we use to apply styling to our HTML content, such as \n- colour\n- typography\n- layout\n- animation (when used for presentation)\n\n---\n\n## Javascript \n### Behaviour\nThe official programming language of the browser. It does the things HTML and CSS can\'t, such as:\n- dynamically update content\n- control media such as video\n- animation of images, svgs, etc\n- math, if you\'re into that kind of thing\n\n---\n\n### Where can you use Javascript?\n![Illustration: Browser vs Node](/images/js/chrome-vs-node.png)\n\nSource: [Learn JavaScript in 1 Hour](https://youtu.be/W6NZfCO5SIk?t=56)\n\n---\n\n## Javascript outside the browser\n- [Build a web server](https://www.digitalocean.com/community/tutorials/how-to-create-a-web-server-in-node-js-with-the-http-module)\n- [Building games](https://medium.com/the-node-js-collection/fun-and-games-with-node-js-359cee687173)\n- [Home automation](https://levelup.gitconnected.com/make-your-own-smarthome-server-with-nodejs-86e7aa0f63f4)\n- [Controlling drones](https://medium.com/maestral-solutions/programming-the-ar-drone-2-0-using-javascript-and-node-js-part-1-10bb946c60e5)\n\n---\n\n## A Quick History\n- 1995: JavaScript invented by Brendan Eich\n- 1996: Netscape 2 released with JavaScript 1.0\n- 1997: JavaScript became an ECMA standard\n- 1997: ECMAScript 1 (**ES1**) released\n- 1998: **ES2** released\n- 1999: **ES3** released\n- 2009: **ES5** released (ES4 abandoned)\n- 2015: **ES6** released\n- 2018: Full support for ES6 in all browsers (except IE)\n\nSource: [W3Schools](https://www.w3schools.com/js/js_history.asp)\n\n---\n\n### What is ECMAScript?\n![Illustration: ECMAScript vs Javascript](/images/js/ecmascript-vs-javascript.png)\n\nSource: [Learn JavaScript in 1 Hour](https://youtu.be/W6NZfCO5SIk?t=154)\n\n---\n\n## Adding JS to HTML\n### Recommended for this course\n```html\n<html>\n  <head>\n    <title>Hello World!</title>\n    <script src="js/app.js" type="module"><\/script>\n  </head>\n  <body>\n    <h1>Hello world!</h1>\n  </body>\n</html>\n```\n- `<script>` is added to the `<head>` element\n- `<\/script>` closing tag is required, because reasons\n- `type="module"` turns on modern features\n\n---\n\n## Other ways to add JS to a page\nYou will often see these in examples/documentation online.\n- You will lose marks if you use these methods for assignments in this course (unless you\'re installing a third-party library or plugin).\n\n---\n\n### Alternative 1\n## Embedded Javascript\n```html\n<html>\n<head>\n  <title>Hello world!</title>\n</head>\n<body>\n  <h1>Hello world!</h1>\n  <script>\n    console.log("Hello world!");\n  <\/script>\n</body>\n</html>\n```\n- `<script>` element goes just before the `</body>`\n- You will see this often when installing third-party libraries\n\n---\n\n### Alternative 2\n## Content Delivery Networks\n\n```html\n<html>\n  <head>\n    <title>Hello Font Awesome!</title>\n    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/js/all.min.js"><\/script>\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css">\n  </head>\n  <body>\n    <i class="fa-brands fa-square-js"></i>\n  </body>\n</html>\n```\n- A convenient way of installing third-party libraries.\n- To see if something can be loaded via a CDN, search:\n> "cdn [your favourite tool]"\n\n---\n\n## Writing JS\n### Rules, tips and reminders\n\n---\n\n## Naming variables\n- JavaScript is case-sensitive:\n    - `myvar` is not the same as `myVar`\n- Use camelCase for variable names:\n    - Yup: `lastName`\n    - Nope: `last_name`\n- Hyphens (-) are not allowed in variable names\n    - CSS: `border-top`\n    - JS: `borderTop`\n- Semi-colons are optional but recommended for this course;\n\n---\n\n## Readable code\n- 2 space indents\n- Spaces around operators (`=`, `+`, `*`, etc)\n    - **Yup**: \n        ```js\n        const total = 99.99 * 0.05;\n        ```\n    - **Nope**:\n        ```js\n        const total=99.99*0.05;\n        ```\n- Limit line length to 80 characters\n\n---\n\n## Comment your code!\n```js\n// Single line comment\n\n/*\nMulti-line\ncomment\n*/\n```\n- Code commenting will be expected in this course\n- Comments should be descriptive but concise\n\n---\n\n## Further resources\n- MDN: [Javascript - First Steps](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps)\n- **[Learn JavaScript in 1 Hour](https://www.youtube.com/watch?v=W6NZfCO5SIk)** by Mosh\n- Freecode Camp: \n    - [Full JavaScript Course for Beginners](https://www.freecodecamp.org/news/full-javascript-course-for-beginners/)\n    - Exercises: [Javascript basics](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#basic-javascript)\n- Code Academy: [Introduction to Javascript](https://www.codecademy.com/learn/introduction-to-javascript)\n- [Traversy Crash Course in Javascript](https://www.youtube.com/watch?v=hdI2bqOjy3c) - video series\n';
const __vite_glob_0_44 = "# Numbers\n## Math Operators and Coercion\n\n---\n\n## Types of Numbers\n<dl>\n  <dt>Integers</dt>\n  <dd>Floating-point numbers without a fraction. They can either be positive or negative, e.g. 10, 400, or -5.</dd>\n  <dt>Floating point numbers</dt>\n  <dd>Floats have decimal points and decimal places, for example 12.5, and 56.7786543.</dd>\n  <dt>Doubles</dt>\n  <dd>a specific type of floating point number that have greater precision than standard floating point numbers.</dd>\n</dl>\n\n---\n\n## Javascript Weirdness\nJS only has one type of number: floating point. Integers are faked.\n\n---\n\n## Basic Math in Javascript\n### Grade-school flash-back\n\n---\n\n## Arithmetic Operators\n```js\nconst num1 = 8;\nconst num2 = 3;\n\n// Addition\nconst num3 = num1 + num2; // 13\n\n// Subtraction\nconst num4 = num1 - num2; // 5\n\n// Multiplication\nconst num5 = num1 * num2; // 24\n\n// Division\nconst num6 = num1 / num2; // 2.666666\n\n// Remainder\nconst num7 = num1 % num2; // 2\n\n// Exponent\nconst num8 = num1 ** num2 // 512\n```\n\n---\n\n## BEDMAS still applies\nOrder of operations:\n1. Brackets\n2. Exponents\n3. Divide/Multiply\n4. Add/Subtract\n\n```js\nconst num1 = 4 + 5 * 8 - 2; // 4 + 40 - 2 -> 42\nconst num2 = (9 + 4) * 2 // 13 * 2 -> 26\n```\n\n---\n\n## Increment/Decrement Operators\nIncrement\n```js\nlet num1 = 4;\nnum1++; // 5\n```\nDecrement\n```js\nlet num2 = 8;\nnum2--; // 7\n```\n\n---\n\n## Assignment Operators\nOperators that assign a value to a variable.\n```js\nlet x = 3; // x contains the value 3\nlet y = 4; // y contains the value 4\nx = y; // x now contains the same value y contains, 4\n```\nSpecial Operators:\n```js\n// Addition assignment\nx += 4; // x = x + 4\n\n// Subtraction assignment\nx -= 3; // x = x - 3\n\n// Multiplication assignment\nx *= 3; // x = x * 3\n\n// Division assignment\nx /= 5; // x = x / 5;\n\n```\n\n---\n\n## Type Coercion\nWhen one data type (i.e. a String) is automatically converted to another (i.e. a Number).\n\nSee: [MDN Glossary](https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion)\n\n---\n\n## Coercion Example\n\n```js\nconst value1 = \"5\";\nconst value2 = 9;\n\nconst sum = value1 + value2; // 59\n```\n- Number values with quotes around them are actually strings.\n- The `+` operator also concatenates strings (i.e. it glues them together):\n    ```js\n    const fullName = 'Tony' + ' ' + 'Grimes' // Tony Grimes\n    ```\n- If `+` sees a number as a string, it will treat it like a string and concatenate it.\n\n---\n\n## Converting Strings to Numbers\nWe can use `parseInt()` and `parseFloat()` to manually convert string numbers to number numbers:\n\n```js\nconst fakeNum1 = \"88\";\nconst realNum2 = parseInt(fakeNum1); // 88\n\nconst fakeNum2 = \"3.14\";\nconst realNum2 = parseFloat(fakeNum2) // 3.14\n```\nWe will often need to do this after we pass a number through a form, `prompt()` or the command line.\n\n---\n\n## Further Learning\n- [Basic Math in Javascript](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math)\n- [What is type coercion in Javascript?](https://www.geeksforgeeks.org/what-is-type-coercion-in-javascript/)\n- [mathjs](https://mathjs.org/): an Extensive math library for Javascript.\n\n";
const __vite_glob_0_45 = '# Object Methods\n\nThese can make it easier to iterate through object values\n\n---\n\n## Terminology\n\n<dl>\n\n<dt>this</dt>\n<dd>When used in an object, it refers back to the object so that you can access it\'s values from within</dd>\n<dt>Object Method</dt>\n<dd>Used on the object constructor (unlike array methods), they take the object as a parameter</dd>\n\n---\n\n## `Object.keys`\n\n- Returns an array of all the keys in an object\n\n```js\nconst dog = {\n  name: "Kira",\n  age: 4,\n  breed: "White Shepard/Husky",\n};\nconst keys = Object.keys(dog);\nconsole.log(keys);\n// will print out: ["name", "age", "breed"]\n```\n\n---\n\n## `Object.values`\n\n- Returns an array of all the values in an object\n- useful if you need to work with the data in an object and want to use array methods\n\n```js\nconst dog = {\n  name: "Kira",\n  age: 4,\n  breed: "White Shepard/Husky",\n};\nconst values = Object.values(dog);\nconsole.log(values);\n// will print out: ["kira", 4, "White Shepard/Husky"]\n```\n\n---\n\n## `Object.entries`\n\n- Returns an array of arrays of all the keys and values in an object\n\n```js\nconst dog = {\n  name: "Kira",\n  age: 4,\n  breed: "White Shepard/Husky",\n};\nconst entries = Object.entries(dog);\nconsole.log(entries);\n// will print out: [["name", "kira"],["age", 4],["breed", "White Shepard/Husky"]]\n```\n\n---\n\n## `Object.create`\n\n- Creates a new object linked to the prototype of an existing object\n- Great for when you have a general object category and need specific variations\n- example that\'s using the dog object in the past few slides to make a cat object\n- This is a slightly more advanced method that you likely won\'t need for most cases, but this and others are good to be aware of because they do come in handy.\n\n```js\nconst cat = Object.create(dog);\ncat.breed = "Calico";\n```\n\n---\n';
const __vite_glob_0_46 = "# Strings\n## And Common String Methods\n![Example of a string object in the console](/images/js/string-object.png)\n\n---\n\n### The String Object\nJavascript can convert strings into a `String` object, which includes:\n- An array of each character in the string;\n- An `String.length` property representing the number of characters in the string.\n- A number of string methods that provide useful searching and manipulation functions. These methods will often accept or return the _index_ of a character or substring.\n\n---\n\n### Common string operations\n\n- Find the ['length'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length) of a string\n\n    ```js\n    const browserType = 'mozilla';\n    \n    browserType.length; // 7\n\n    ```\n\n- Retrieving a specific string character\n\n    ```js\n    const firstChar = browserType[0];\n    \n    console.log(firstChar); // 'm'\n\n    ```            \n- Retrieving the _last_ character\n    ```js\n    const lastChar = browserType[browserType.length - 1];\n    \n    console.log(lastChar); // 'a'\n\n    ```\n\n---\n\n### Testing for a substring\nThe [`includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes) method performs a case-sensitive search to determine whether one string may be found within another string, returning `true` or `false` as appropriate. \n\n```js\nconst browserType = 'mozilla';\n\nif (browserType.includes('zilla')) {\n  console.log('Found zilla!');\n} else {\n  console.log('No zilla here!');\n}\n\n```\n\n---\n\n### Testing for a starting substring\nThe [`startsWith()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith) method determines whether a string begins with the characters of a specified string, returning true or false as appropriate. \n\n```js\nconst browserType = 'mozilla';\n\nif (browserType.startsWith('moz')) {\n  console.log('Starts with moz!');\n} else {\n  console.log(\"Doesn't start with moz!\");\n}\n\n```\n\n---\n\n### Testing for an ending substring\nThe [`endsWith()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith) method determines whether a string ends with the characters of a specified string, returning `true` or `false` as appropriate. \n\n```js\nconst browserType = 'mozilla';\n\nif (browserType.endsWith('zilla')) {\n  console.log('Ends with zilla!');\n} else {\n  console.log(\"Doesn't end with moz!\");\n}\n\n```\n\n---\n\n### Finding the location of a substring\nThe [`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf) method, given one argument: a substring to search for, searches the entire calling string, and returns the index of the first occurrence of the specified substring.\n\n```js\nconst paragraph = 'The quick brown fox jumps over the lazy dog. If the dog barked, was it really lazy?';\n\nconst searchTerm = 'dog';\nconst indexOfFirst = paragraph.indexOf(searchTerm);\n\nconsole.log(`The index of the first \"${searchTerm}\" from the beginning is ${indexOfFirst}`);\n// expected output: \"The index of the first \"dog\" from the beginning is 40\"\n\n```\n\n---\n\n### Updating parts of a string\nThe [`replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) method returns a new string with some or all matches of a `pattern` replaced by a `replacement`.\n\n```js\nconst browserType = 'mozilla';\nconst updated = browserType.replace('moz','van');\n\nconsole.log(updated);      // \"vanilla\"\nconsole.log(browserType);  // \"mozilla\"\n\n```\n\n---\n\n### Extracting a substring from a string\nThe [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) method extracts a section of a string and returns it as a new string, without modifying the original string. \n\n```js\nconst browserType = 'mozilla';\nconsole.log(browserType.slice(1, 4)); // \"ozi\"\n\n```\n\n---\n\n### More String methods\nSee [the complete list of Javascript string methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#instance_methods)\n";
const __vite_glob_0_47 = "\n# Useful JS Objects\n## Built-in Objects we get for free\n---\n\n### Terminology\n<dl>\n  <dt>Browser Objects</dt>\n  <dd>Tools that are only available when Javascript is running in the browser. These are not available in Node. Examples: <code>window</code> and <code>document</code>.</dd>\n  <dt>Built-in Objects</dt>\n  <dd>Tools that are always available in Javascript. Examples: <code>Math</code> and <code>Date.</code></dd>\n  <dt>Dot Notation</dt>\n  <dd>Dots are used to access methods (functions) and properties (variables) inside a given object. Example: `document.querySelector()`.</dd>\n</dl>\n\n---\n\n### Terminology\n<dl>\n  <dt>Object Method</dt>\n  <dd>Functions that are available inside an object using dot notation. Functions/methods end with parentheses. Examples: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\"><code>Math.round()</code></a>.</dd>\n  <dt>Object Property</dt>\n  <dd>Non-function variables that are available inside an object using dot notation. Examples: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/title\"><code>document.title</code></a> (the title of the current page).</dd>\n</dl>\n\n---\n\n## DOM methods and properties\n### Document Object Model\n\n---\n\n## `document.querySelector()`\n### Creating a DOM variable\n```html\n<body>\n  <h1 class=\"intro\">Hello world!</h1>\n</body>\n```\n\n```js\nconst headingElement = document.querySelector('h1');\n```\n- `document` is the top-level DOM variable that represents the HTML element;\n- `.querySelector()` finds the _first_ HTML element that matches the provided CSS selector;\n\n---\n\n### Any CSS selector is valid\n\n```html\n<body>\n  <h1 class=\"intro\">Hello world!</h1>\n</body>\n```\n\nAll of these selectors will create the same DOM variable:\n\n```js\nconst headingElement = document.querySelector('h1');\n```\n```js\nconst headingElement = document.querySelector('.intro');\n```\n```js\nconst headingElement = document.querySelector('body > h1');\n```\n\n---\n\n### `Element.innerHTML`\nAccessing HTML Content\n```html\n<body>\n  <h1 class=\"intro\">Hello world!</h1>\n</body>\n```\n\n```js\n// Create DOM variable\nconst headingElement = document.querySelector('h1');\n\n// Access element content with .innerHTML property\nconst h1Content = headingElement.innerHTML; // 'Hello world!'\n```\n\n---\n\n### `Element.innerHTML`\nEditing HTML Content\n```html\n<body>\n  <h1 class=\"intro\">Hello world!</h1>\n</body>\n```\n\n```js\n// Create DOM variable\nconst headingElement = document.querySelector('h1');\n\n// Edit element content with .innerHTML property\nheadingElement.innerHTML = 'Hello Tony!';\n```\nAfter:\n```html\n<body>\n  <h1 class=\"intro\">Hello Tony!</h1>\n</body>\n```\n\n---\n\n### `Element.innerHTML`\nCreating new elements\n```js\n// Edit element content with .innerHTML property\nheadingElement.innerHTML = 'Hello <em>Tony</em>!';\n```\n```html\n<body>\n  <h1 class=\"intro\">Hello <em>Tony</em>!</h1>\n</body>\n```\n\n---\n\n## `prompt()`\n### Quick and dirty inputs\n```js\nconst name = prompt(\"What's your name?\");\n```\n\n![Example of a browser prompt](/images/js/prompt-example.png)\n\n---\n\n```js\nconst h1 = document.querySelector('h1');\nconst name = prompt(\"What's your name?\");\nh1.innerHTML = `Hello ${name}!`;\n```\n\n![Example of a browser prompt](/images/js/prompt-tony.png)\n\n```html\n<body>\n  <h1 class=\"intro\">Hello Tony!</h1>\n</body>\n```\n\n---\n\n## Key Takeaways\n- All DOM variables will have the `.querySelector()` method;\n- `.innerHTML` works both ways when reading and writing content to and from HTML elements;\n- `.innerText` can be used if you don't want HTML tags included;\n- `prompt()` is rarely used professionally; we're using it as a short cut for now;\n\n---\n\n## The Math Object\n\n---\n\n### [`Math.round()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round)\nRounds numbers inside the parentheses\n```js\nMath.round(55.5) // 56\n```\nRounds `.5` up to the nearest whole number.\n\n---\n\n### [`Math.floor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)\n\n```js\nMath.floor(55.9) // 55\n```\nRounds all decimals down to the nearest whole number.\n\n---\n\n### [`Math.ceil()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil)\n\n```js\nMath.floor(55.1) // 56\n```\nRounds all decimals up to the nearest whole number.\n\n---\n\n## Further Reading\n- **[`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window)**: the window containing a DOM document.\n- **[`document`](https://developer.mozilla.org/en-US/docs/Web/API/Document)**: points to the DOM document (i.e. HTML document) loaded in a window.\n- **[`Element`](https://developer.mozilla.org/en-US/docs/Web/API/Element)**: an object that represents an HTML element.\n- **[`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math)**: mathematical constants and functions.\n- **[`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)**: a single moment in time in a platform-independent format.\n";
const __vite_glob_0_48 = "# Javascript\n## Value Validation\n\n---\n\n## Review: Types of Errors \n- **Syntax errors**\n    - Errors in the rules of writing JS\n    - Easiest to debug\n- **Logic errors**\n    - Code is broken but there are no errors\n    - Hardest to debug; sometimes takes hours\n\n---\n\nThese errors often arise when a variable is:\n- an unexpected data type\n- unexpectedly `undefined`\n- out of scope (usually returns `undefined`)\n\n---\n\n## Explicitly converting to specific data types:\n- `String(myVar)`\n- `Number(myVar)`\n- `Boolean(myVar)` or `!!myVar`\n- `Array(myVar)`\n- `Object(myVar)`\n\nThere is no constructor function for `null`\n\n---\n\nSome more subtle errors that should also be avoided (and will cost you marks in assignments):\n- outputting an unexpected empty variable\n    ```js\n    Hello, !\n    ```\n- outputting `undefined` variables\n    ```js\n    Hello, undefined!\n    ```\n- outputting `NaN` (not a number)\n    ```js\n    $NaN plus 5% GST is $NaN\n    ```\n\n---\n\n## Testing for `undefined`\nReminder: Variables that have been declared but not assigned will be `undefined`. Undeclared variables will also return as `undefined`.\n\n```js\nif (typeof myVar !== 'undefined') {\n  // Variable has been assigned!\n}\n```\n\n---\n\n## Testing for specific data types\n- `String`\n- `Number`\n- `Boolean`\n- `null`\n- `Array`\n- `Object`\n\n---\n\n## String\nTest for `String` value type:\n\n```js\nif (typeof myVar === 'string') {\n  // Variable is a string!\n}\n```\n    \n---\n\n## Number\nTest for `Number` value type:\n\n```js\nif (typeof myVar === 'number') {\n  // Variable is a number!\n}\n```\n\n---\n\n## Number\nTest for `NaN` (not a number) property with `isNaN()`:\n\n```js\n\nconst sum = 1 * 'two';\n\nif (isNaN(sum)) {\n  console.log('Not a Number!');\n}\n\n```\n---\n\n## Boolean\nTest for `Boolean` value type:\n\n```js\nif (typeof myVar === 'boolean') {\n  // Variable is a boolean!\n}\n```\n\n---\n\n## Null\nTest if a variable is NOT `null`:\n\n```js\nif (typeof myVar === \"object\" && !myVar) {\n  // Variable is a NOT null!\n}\n```\n\n`typeof null` evaluates to \"object\" because of an old and non-fixable bug in Javascript. See [How to Check for null in JavaScript](https://javascript.plainenglish.io/how-to-check-for-null-in-javascript-dffab64d8ed5) for all the gory details.\n\n---\n\n## Array\nTest for `Array` value type:\n\n```js\n// Method 1\nif (myVar.constructor == Array) {\n  // Variable is an array!\n}\n\n// Method 2\nif (Array.isArray(myVar)) {\n  // Variable is an array!\n}\n```\n- Source: [How to check if a variable is an array](https://stackoverflow.com/questions/767486/how-do-you-check-if-a-variable-is-an-array-in-javascript)\n\n---\n\n## Array\nTest for a NON-EMPTY array:\n\n```js\n// Method 1\nif (myVar.constructor == Array && myVar.length) {\n  // Variable is anon-empty array!\n}\n\n// Method 2\nif (Array.isArray(myVar) && myVar.length) {\n  // Variable is anon-empty array!\n}\n```\n\n---\n\n## Objects\nTest for `Object` value type:\n\n```js\nif (typeof myVar === 'object' && myVar !== null) {\n  // Variable is an object!\n}\n```\n- `null` variables also return \"object\" because of a bug in Javascript, hence the extra test for `null`\n\n---\n\n## Further Learning\n- MDN: [`typeof` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof)\n- Stack Overflow: \n    - [How to check a **undefined** variable in JavaScript](https://stackoverflow.com/questions/858181/how-to-check-a-not-defined-variable-in-javascript)\n    - [Check if a variable is a **string** in JavaScript](https://stackoverflow.com/questions/4059147/check-if-a-variable-is-a-string-in-javascript)\n    - [How to check if type is **Boolean**](https://stackoverflow.com/questions/28814585/how-to-check-if-type-is-boolean)\n    - [How do I check for **null** values in JavaScript?](https://stackoverflow.com/questions/6003884/how-do-i-check-for-null-values-in-javascript)\n- Bobby Hadz: [How to Check if a Value is a **Number** in JavaScript](https://bobbyhadz.com/blog/javascript-check-if-value-is-number)\n";
const __vite_glob_0_49 = "\n# Javascript Variables\n## Declaration vs Assignment\n\n---\n\n## Terminology\n<dl>\n  <dt>Declaration</dt>\n  <dd>Creating a variable name in memory (with or without a value) using the <code>const</code> and <code>let</code> declaration keywords.</dd>\n  <dt>Assignment</dt>\n  <dd>When we give a variable a value using the <code>=</code> assignment operator. If a variable hasn't been assigned, it's value will be <code>undefined</code>.</dd>\n</dl>\n\n---\n\n## Declaration Keywords\n1. `const`: The value of a constant can't be re-assigned later:\n    ```js\n    // Names rarely change -> use const\n    const name = 'Harry Potter';\n    ```\n2. `let`: The value may be re-assigned later:\n    ```js\n    // Flags and indicators often change -> use let\n    let systemStatus = 'idle';\n    ```\n3. `var`: This keyword is the classic (ES5) method of declaring a variable and should be avoided.\n\n---\n\n## Which keyword to use?\nOf the three ways you can declare a new variable, we recommend this order:\n1. Try `const` first;\n2. If you get an assignment error, use `let`;\n    ![Constant reassignment error](/images/errors/const-reassignment-chrome.png)\n3. Avoid the use of `var`.\n\n---\n\n## `const` and `let` are Block Scoped\nBlocks include `if`/`else` statements:\n```js\nlet hungry = true;\n\nif (hungry) {\n  let lunch = 'Pizza';\n}\n\nconsole.log(lunch) // error: `lunch` is only available inside if statement\n```\n\nInstead:\n```js\nlet hungry = true;\nlet lunch;\n\nif (hungry) {\n  lunch = 'Pizza';\n}\n\nconsole.log(lunch) // Pizza!\n```\n\n---\n\n## Naming variables\n- Use camelCase;\n- Use descriptive variable names:\n    ```js\n    let str = 'idle'; // Bad\n    let systemStatus = 'idle'; // Good\n    ```\n- Comment your variables:\n    ```js\n    // System status: idle | pending | active\n    let systemStatus = 'pending';\n    ```\n\n---\n\n## Key Takeaways\n- Variables are `undefined` until they are assigned a value. \n- `const` and `let` are only used the first time you declare the variable.\n- Arrays and objects defined with `const` are still changeable, they just can't be reassigned entirely.\n    ```js\n    const hobbies = ['pinball', 'coding', 'disc golf'];\n    hobbies[1] = 'programming'; // no error\n    ```\n\n---\n\n## Javascript Value Types\n### 8 Types covered in this course\nThere are more but we don't need to know about them.\n\n---\n\n## Primitive Types\n- **Numbers**: floating point (integers are a lie).\n- **Strings**: used to represent textual data.\n- **Booleans**: `true` and `false`.\n- **Null**: has exactly one value - null.\n- **Undefined**: a variable that has not been assigned a value has the value undefined.\n    - never manually assign a variable as `undefined`.\n\n---\n\n### Numbers\n```js\nconst price = 20;\nconst gst = 1;\nconst total = price + gst;\n\nconsole.log(total); // 21\n```\n- **Number literal**: a number with no quotes;\n- There is one type of Number in JS: floating point;\n- Integers kind of exist but not really:\n    - `46` is actually something like `46.000001`;\n\n---\n\n### Strings\n```js\nconst firstName = 'Tony'; // single quotes\nconst lastName = \"Grimes\"; // double quotes\nconst fullName = `${firstName} ${lastName}`; // using backticks and template literals\n\nconsole.log(fullName); // 'Tony Grimes'\n```\n\n- **String literal**: a string of alphanumeric characters surrounded by single/double quotes or backticks;\n- **Careful**: Sometimes numbers are actually strings:\n    ```js\n    const fakeNumber = '42';\n    ```\n\n---\n\n### Booleans\n```js\nconst hungry = true;\n\nif (hungry) {\n  console.log('Time for lunch!');\n}\n```\n- **Boolean literal**: Either `true` or `false` with no quotes;\n- There are only two possible Boolean values;\n\n---\n\n### Null\n```js\nconst foodInStomach = null;\n\nconsole.log(foodInStomach); // null\n```\n- **Null literal**: `null` with no quotes;\n- `null` means \"nothing\";\n\n---\n\n### `undefined`\n- Special type used by Javascript when a variable is non-existent or has no value;\n- Never explicitly assign a variable to undefined;\n\n---\n\n## Complex Types\n- **Arrays**: a list of values, including other arrays.\n- **Objects**: a collection of name/value pairs (properties).\n- **Functions**: a block of reusable code that accepts arguments (input data) and may or may not return a value.\n\n---\n\n### Arrays\n```js\nconst colours = ['red', 'green', 'blue'];\n\nconsole.log(colours[1]); // 'green'\n```\n- **Array literal**: A comma-separated list of values surrounded by square brackets(`[ ]`);\n- Values can be any type, including another array;\n- Array items are accessed by `index` starting at `0`;\n\n---\n\n### Objects\n```js\nconst person = {\n  name: 'Tony Grimes',\n  age: 46,\n  mentalAge: 12,\n  hungry: true,\n  hobbies: ['pinball', 'coding', 'disc golf']\n}\n```\n- **Object literal**: A comma-separated list of `key`:`value` pairs surrounded by curly braces;\n- In Javascript, objects are simply a list of `key`/`value` pairs and that's it;\n    - In other object-oriented languages, objects have a different meaning and are more complex;\n\n---\n\n### Functions\n```js\n// Traditional ES5 syntax\nconst greet = function() {\n  console.log(\"Hello!\");\n}\n\ngreet(); // 'Hello!'\n\n// Newer ES6 syntax\nconst farewell = () => {\n  console.log(\"Goodbye!\");\n}\n\nfarewell(); // 'Goodbye!'\n```\n- Covered in detail later in the course;\n- Methods are functions that are defined inside objects;\n\n\n---\n\n## Further resources\n- [Storing the information you need — Variables](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Variables)\n- [Template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n- Video: [Differences Between Var, Let, and Const](https://www.youtube.com/watch?v=9WIJQDvt4Us) by Web Dev Simplified\n\n";
const __vite_glob_0_50 = '\n## SvelteKit Events and Reactivity\n### Adding User Interaction\n\n---\n\n### Some handy form controls\nText input: <input type="text">\n```html\n<label for="text-input">Text input</label>: \n<input type="text" id="text-input">\n```\nButton: <button>Click Me!</button>\n```html\n<button>Click Me!</button>\n```\nCheckbox: <input type="checkbox" name="dark" id="dark">\n```html\n<label for="dark-mode">Checkbox</label>: \n<input type="checkbox" name="dark-mode" id="dark-mode">\n```\n\n---\n\nDropdown Menu: <select name="menu" id="menu">\n  <option value="one">Option 1</option>\n  <option value="two">Option 2</option>\n  <option value="three">Option 3</option>\n</select>\n```html\n<label for="menu">Dropdown Menu: </label>\n<select name="menu" id="menu">\n  <option value="one">Option 1</option>\n  <option value="two">Option 2</option>\n  <option value="three">Option 3</option>\n</select>\n```\n\n---\n\n## Svelte events\n### `on:` directive\nYou can listen to any event on an element with the on: directive:\n\n```html\n<button on:click={handleClick}>\n  Click Me!\n</button>\n```\n\nImportant: almost any element can have an event attached to it. They don\'t have to be form controls.\n\n---\n\n## Event Handlers\nEvent handlers only accept the `event` object as an argument.\n```html\n<script>\n  const handleClick = function(event) {\n    console.log(event);\n  }\n<\/script>\n\n<button on:click={handleClick}>Click Me!</button>\n```\nThe event object is built for you by the browser.\n\n---\n\n### `event.target`\nYou can access the element that triggered the event (i.e. a click button) with `event.target`.\n```html\n<script>\n  const handleClick = function(event) {\n\n    console.log(event.target.value); // Click Me!\n  \n  }\n<\/script>\n\n<button on:click={handleClick}>Click Me!</button>\n```\n---\n\n## Handy Events\n<dl>\n  <dt>click</dt>\n  <dd>Fires when an element is clicked.</dd>\n  <dt>mousemove</dt>\n  <dd>Fires when the mouse is moved.</dd>\n  <dt>input</dt>\n  <dd>Fires when a user inputs data into a form element.</dd>\n  <dt>change</dt>\n  <dd>Fires when a form element value is changed.</dd>\n</dl>\n\n---\n\n## Svelte Reactivity\nSvelte automatically updates the DOM when a component\'s variable is reassigned.\n\n---\n\n## Terminology\n<dl>\n  <dt>Assignment</dt>\n  <dd>When a variable\'s value is changed with an assignment operator (`=`).</dd>\n  <dt>Application State</dt>\n  <dd>In Svelte, application state is the culmination of all variable values in an application.</dd>\n  <dt>Reactivity</dt>\n  <dd>When the DOM state (i.e. the information presented on the webpage) is automatically updated when a variable is updated.</dd>\n</dl>\n\n---\n\n## Arrays and objects\nBecause reactivity _only_ happens when a variable is _reassigned_, `array.push()` and `array.pop()` **do not** trigger reactivity.\n\nInstead, arrays need to be updated by reassigning them.\n\n---\n\n### Assign by bracket notation\n```js\nlet array = [\'one\', \'two\', \'three\'];\n\n// Assign the next item in the array\narray[3] = \'four\';\n\n// Assign using array.length\narray[array.length] = \'five\';\n```\n\n### Assign by spread operator (ES6)\n```js\nlet array = [\'one\', \'two\', \'three\'];\n\n// Spread operator "expands" an array into it\'s individual values\narray = [...array, \'four\'];\n\n// ...array -> \'one\', \'two\', \'three\'\n```\n\n---\n\n## A redundant last resort\n`array.push()` and `array.pop()` can still be used if you reassign an array to itself later.\n\n```js\nlet array = [\'one\', \'two\', \'three\'];\n\n// Won\'t trigger reactivity\narray.push(\'four\');\n\n// Redundant, but it works\narray = array;\n```\n\n---\n\n## Further Learning\n[Event directives](https://svelte.dev/docs#template-syntax-element-directives-on-eventname)\n\n**Events**\n- [DOM events](https://learn.svelte.dev/tutorial/dom-events)\n- [DOM event forwarding](https://learn.svelte.dev/tutorial/dom-event-forwarding)\n\n**Reactivity**\n- [Assignments](https://learn.svelte.dev/tutorial/reactive-assignments)\n- [Declarations](https://learn.svelte.dev/tutorial/reactive-declarations)\n- [Reactive Statements](https://learn.svelte.dev/tutorial/reactive-statements)\n- [Updating arrays and objects](https://learn.svelte.dev/tutorial/updating-arrays-and-objects)\n';
const __vite_glob_0_51 = '\n## Introduction to SvelteKit\n### Svelte\'s Application Framework\n\n---\n\n## Svelte vs SvelteKit\n<dl>\n  <dt>Svelte</dt>\n  <dd>A frontend component framework for building user interfaces.</dd>\n  <dt>SvelteKit</dt>\n  <dd>A front and backend framework for rapidly developing web applications using Svelte.</dd>\n</dl>\n\n---\n\n## Key Differences\n- Svelte is used to create user interface components in the browser\n- SvelteKit handles other application features like routing, server-side rendering and loading data\n\n---\n\n## Application routing\nA key feature of SvelteKit is its file-based routing system\n\n---\n\n## Terminology\n<dl>\n  <dt>Component</dt>\n  <dd>A reusable, self-contained block of code that encapsulates HTML, CSS, and JavaScript that belong together, written into a <code>.svelte</code> file</dd>\n  <dt>Route</dt>\n  <dd>A URL path that users can access.</dd>\n  <dt>File-based routing</dt>\n  <dd>Routes that are based on files and directories in your codebase.</dd>\n</dl>\n\n---\n\n## Anatomy of a URL\n\n---\n\n### Protocol\n<p class="code"><strong>https://</strong>example.com/blog/post-1</p>\n\n### Domain\n<p class="code">https://<strong>example.com</strong>/blog/post-1</p>\n\n### Route path\n<p class="code">https://example.com<strong>/blog/post-1</strong></p>\n\n### Path segment\n<p class="code">https://example.com/<strong>blog</strong>/post-1</p>\n\n---\n\n## Routing conventions\n- All routes must reside in `src/routes`\n- Every path segment corresponds to a directory name\n- Every page in a route must be named `+page.svelte`\n    - Like `index.html` in a vanilla static website\n\n---\n\n## Examples\n`src/routes/+page.svelte`\n- the root home page\n\n`src/routes/blog/+page.svelte`\n- a `/blog` route\n\n`src/routes/blog/post-1/+page.svelte`\n- a `/blog/post-1` route\n\n---\n\n## `+page.svelte`\n### A component that defines a page of your app\nBy default, pages are rendered both on the server (SSR) for the initial request and in the browser (CSR) for subsequent navigation.\n\n---\n\n## `+layout.svelte`\n### A component that defines a layout for one or more routes\n- To create a layout that applies to every page, make a file called `src/routes/+layout.svelte`. \n- By default, `+layout.svelte` will be applied to all child pages.\n- Layouts are need a `<slot></slot>` to display page content.\n\n---\n\n## Loading data\nAdditional pages are used to load server data and will be covered later in the course:\n- `+page.js`\n- `+page.server.js`\n- `+layout.js`\n- `+layout.server.js`\n\n---\n\n## Other route pages\nOther pages may reside in a route directory as long as they do not have a reserved name like those just covered.\n\nThese can be used for other components needed for a specific route.\n\n---\n\n## Dynamic Routes\nWe can create routes that represent multiple pages with **route parameters**. ([source](https://joyofcode.xyz/sveltekit-routing))\n\n![Route parameters](/images/svelte/route-parameters.png)\n\n---\n\n## `$page`\n`$page` is a special variable SvelteKit provides that gives you information about the current route, including route parameters.\n```html\n<script>\n  import { page } from \'$app/stores\';\n\n  console.log($page.params)\n\n<\/script>\n```\n`$page` is a Svelte store, which means you need to access it with a `$`.\n\n\n---\n\n## Tips and Tricks\n\n---\n\n## Use Recent Resources\nSvelteKit 1.0 was released at the end of December 2022. \n- A lot of tutorials and resources are now out of date as big changes happened in the summer of 2022;\n- When using a video, article or tutorial, make sure it was created or updated in 2023 (or at least in the Fall of 2022);\n- You can filter Google searches by date using the Tools drop down menu.\n\n---\n\n## `<svelte:head>`\nThe `<svelte:head>` element allows you to insert elements inside the `<head>` of your document:\n\n```html\n<svelte:head>\n  <title>Page title here</title>\n</svelte:head>\n```\n\n---\n\n## Global styles\n- The `<style>` element in a svelte component only applies (i.e. is scoped) to that component.\n- To apply global styles, `import` a stylesheet into your root `+layout.svelte` file.\n    ```html\n    <!-- +layout.svelte -->\n    <script>\n      import \'./styles.css\';\n    <\/script>\n    ```\n\n---\n\n## Further Learning\n### Tutorials\n- [Pages](https://learn.svelte.dev/tutorial/pages)\n- [Layout](https://learn.svelte.dev/tutorial/layouts)\n- [Route parameters](https://learn.svelte.dev/tutorial/params)\n\n### Documentation\n- [Routing](https://kit.svelte.dev/docs/routing)\n';
const __vite_glob_0_52 = `
## Contracting as a Developer
### Tony's unofficial advice

---

## Finding clients
1. Friends and family
    - Tony's first website: [His Step-mom's](http://clairescott.com/).
2. Job boards (see [Pixels Job Board](https://pixelsyyc.com/))
    - Tony's first paying gig: U of C Job Board
3. Client word-of-mouth
    - Tony's next five clients came from referrals
4. Networking (not necessarily networking events)

---

### Key Goal
## Client Expectation management
- Under-promise and over-perform
- Educate the client about "tech debt"
- Battle scope creep by saying no
- Document meetings and phone calls

---

## Sole proprietorships
You don't have to incorporate to operate under a business name:
1. Register a [NUANS](https://www.nuans.com/site/nuans-corporate-name-trademark-reports/en) tradename at a Registry
2. Open a business bank account with tradename
3. Give the tradename registration to your accountant when making a Statement of Business Income on your taxes

See [this Padlet](https://padlet.com/acidtone/friday-night-pints-contracting-as-software-developer-u3zotj3bww2kk1dd) for common questions and answers from a past event that Tony hosted.

---

## It's not all your money!
Money you receive by invoice isn't all yours.
- You still have to pay tax on that income, minus write-offs
- You have to pay back any GST you charged on your invoices
- Tony's recommendation: Set aside about 1/3rd of all invoice income just to be safe 

---

## Signing the client
Every scenario is different but most have the following steps:
1. **First Contact**: First-time meeting
2. **Romance**: Figuring out if you're the right fit
3. **Non-disclosure Agreement**: Often required for deeper discussions (can be Step 1 or 2) 
    - [Sample NDA](../../assets/files/NDA.pdf) (have this vetted by a lawyer)
4. **"Sign" the client**: Often called a Statement of Work but can be an email agreement

---

### Important
## Talk to a Lawyer
- Tony's not a lawyer. Don't trust anything he says.
- Tony uses [Good Lawyer](https://www.goodlawyer.ca/) for contract reviews and consultations.

---

### How are you getting paid?
- Time and materials (by the hour)
- Fixed quote with installments
- Retainer
- Product

---

### Time and materials
Tony recommends this for beginners
- Client is charged by the hour
- Track time in 15 increments
- Invoice monthly (or every two weeks)
- Offer hour quota if client is hesitant
- Be explicit in the agreement: "This is not a fixed quote."
- Cannot charge for invoicing or learning time
- Use invoicing software. Tony uses [Freshbooks](https://www.freshbooks.com/) (it's pricey but there are many alternatives)

---

### Fixed quote with installments
- Not Tony's favourite method
- Ask for at least 25% up front.
- Schedule installments when phases are "complete"
- Weigh the installments so you're at least 75% paid by the time the website is ready for launch

---

### Retainer
- Paid up-front for a set amount of hours
- Not well suited for development 
- Great for regular content updates and maintenance

---

### Product
- Paying a set price for a defined product or set of features
- Examples
  - Software packages
  - Software as a service
  - Client training

---

## Questions to ask the client
### (Not an exhaustive list)

---

### Is this a new or existing project?
- What's the history of the project?
- What's the purpose of the project?
- Who are the Stakeholders?

---

### Existing (Legacy) Projects

---

### Who is currently working on the project?
- Who originally developed it?
- Are they still there? Is there drama?
- Who is the project lead?

---

### What do they need? Where do you fit in?
- Be honest with your skills but...
- Don't sell yourself short
- Do you know any colleagues/mentors that can help?

---

### Where is the Production server hosted?
- Are they using a password manager?
    - If not, recommend a password manager?
- What credentials are needed to access the website?
    - Web server
    - Git repos
    - Database server
    - etc

---

### Does the client have Analytics installed?
- Get access to the Google Analytics
- Use the Content Drilldown to learn which site content is most popular.
- What is the Audience
  - What percentage is mobile traffic?
  - What is the browser share?

---

### New (Greenfield) Projects

---

### Is the site replacing a legacy site? If yes:
- Is there a database?
- How many users are there? How much traffic?
- Are there any hard deadlines?
- Is the host changing?

---

### Where is the Production site going to be hosted?
- **Hosted**: i.e. with Media Temple, Hostgator, AWS, Azure, etc
  - make sure host has good support
- **On-premise** (rare): hosted on site with the client
  - only allow this if the client has an IT department (could be one person)

---

### Where is the Staging (development) server going to be hosted?
- Does the current host have cheap/free staging servers available (preferred)?
- If the servers are different, when how will the site be migrated?
- Who's credit card will be on the account?
    - Client pays directly?
    - Developer expenses to client?

---

### Appendix I
## Waterfall Project Management

---

### Common Phases of a Waterfall Project
1. Discovery
2. Plan
3. Design
4. Development 
5. Testing
6. Launch
7. Support/Maintenance
            
---

### 1. Discovery
- Often includes free time you contribute before you close the sale. 
- Tony's limit is usually 5 hours, depending on project scope.
- This phase usually ends in a project proposal and contract signing
- See: [_Questions to ask the client_](https://sait-wbdv.github.io/slides/w22/cpnt265/waterfall-projects.html#/9)

---

### 2. Plan
- Competitor Analysis 
- Client Goals
- Target Audience
- Needs Assessment 
- Define Scope
- Create Sitemap 
- Gather content

---

### 3. Design
- Wireframes
- Mockups
- Prototypes
- Visual Identity
- Web and Component Design

---

### 4. Development 
- Server environment setup
- Website/app development begins
- Client often tasked with writing content 

---

### 5. Testing
- Deploy to hidden/protected server
- Test website internally
- Conduct user testing

---

### 6. Launch
- Client training
- SEO
- Marketing
- Bug Fixes
- Evaluating success of website 

---

### 7. Support/Maintenance
- What's next?
    - New features
    - Content updates
    - Regular analytics reports
- Maintenance contract?
    - Bug fixes
    - Backups
    - Set an upgrade schedule for dependencies
- Expense hosting or hand it off?

---

## Project/Business Proposals
### Goals and purpose
- Expectation management
- Legal obligations
- Guide during development
- Closing the contract
- Finding investment

---

### Common Proposal Sections
- Project Overview and Goals
- Target Audience
- Stakeholders and job descriptions
- Feature overview
- Delivery Requirements
- Budget and payment schedule
- Timeline and milestones

---

### Proposal Format
The final format should fit the situation and client
- Polished PDF with professional Design
- Bullet point email (Tony's fave method)
- "Living" Google Doc or markdown document
`;
const __vite_glob_0_53 = "\n## Final Week Checklist\n### Time to polish\n\n---\n\n## Profile consistency\n- Decide which social sites you will be using for your professional work.\n- Pick an avatar (i.e. profile pic) and use it on all your these socials: GitHub, Codepen, LinkedIn, etc.\n- When possible, cross link your socials. For example: fill out \"Profile Links\" in your Codepen Profile. \n\n---\n\n## GitHub/Codepen/etc\n- Repo cleaning: Set unneeded repos to Private.\n- Repo polish: Comment and refactor any repos that stay public.\n- Repo naming: Rename past assignments that will remain public. \n    - Ex: `cpnt260-a3` -> `sample-gallery`\n\n---\n\n## Personal/Porfolio website\n- What will you use for your primary website?\n    - Github/Codepen/whatever works if you don't have one.\n- Will you use a custom domain?\n- Have you listed this on your Socials?\n\n---\n\n## Friday Presentation\n- Update Zoom profile image\n- What's the top thing you learned about coding?\n- What's the best job fit? Development, Design, UX, something else?\n- What's Centerpiece of your presentation?\n    - Check out this colour pallette!\n    - Look at how DRY this code is! Did I notice my impeccable indents?\n    - My idea is awesome (with supporting evidence)!\n";
const __vite_glob_0_54 = '\n# Better Search Phrases\n## 90% of Web Dev is [Googling]\n\n---\n\n### How to Google\nEffective search phrases are usually:\n1. **Domain-specific**: Contains terms that are primarily used within a specific industry\n2. **Concise**: Normally 1-4 words long\n3. **Qualified**: Reflects the skill level and/or goal of the searcher\n\n---\n\n### Example Searches\nHow would you rate the following search phrases?\n- Were any words specific to the industry of web development? What are they?\n- How many words are used?\n- What is the skill level of the searcher? What problem might they be solving?\n- How would do you identify high quality results?\n\n---\n\n## "`How do I build a web site?`"\n\n---\n\n## "`Why isn\'t my CSS doing anything?`"\n\n---\n\n## "`web development`"\n\n---\n\n## "`html crash course`"\n\n---\n\n## "`css patterns`"\n\n---\n\n## "`[your fave browser] devtools`"\n\n---\n\n## "`most underrated css properties`"\n\n---\n\n## Identifying high quality results\nLook for search results that:\n- Fit your learning style\n- Solve your problem\n- Have imagery and high visual hierarchy\n- Are current! Is there a date on the resource?\n- Come from a trusted source\n\n---\n\n## Convergent vs Divergent Searching\n- **Convergent**: \n    - There is probably one answer to your problem\n    - Example: copy/pasting an error\n- **Divergent**: \n    - There could be many answers to your problem\n    - You don\'t have a problem\n    - Example: finding an alternative to Codepen using Google Suggestions\n\n---\n\n## "`codepen vs`"\n- Wait for Google to show completion suggestions\n- What other alternatives can you find using a similar "verses search"?\n';
const __vite_glob_0_55 = "\n\n# Boolean Operations\n\nManipulate objects\n  \n---\n\n## 1. Union\n\n- Union combines the selected shapes into a boolean group. \n- If the objects overlap, the new shapes outer path consists of the composite of its sublayers’ paths minus any segments that overlap. \n- The stroke would then be applied to that outer path ignoring any path segments which overlap each other.\n---\n\n## 2. Subtract\n- Subtract is the opposite of Union.\n- Subtract removes the area of a shape or set of shapes from a base shape. \n- Only the bottom shape layer is solid, the rest are subtracted from it.\n---\n\n## 3. Intersect \n\n- Inersect creates a boolean group whose shape consists only of the overlapping parts of its sublayers.\n\n---\n\n### Exclude\n\n- Exclude is the opposite of Intersect\n- Eclude shows only the areas of it's sublayers that **do not** overlap\n\n---\n\n## 4. Figma Shapes\n\n\n- ellipses\n- squares\n- lines\n- text\n\n";
const __vite_glob_0_56 = "\n# Design Systems for Devs\norganize your colors, styles, fonts\n\n---\n\n## What a Design System Does\n- sets standards for how things should look\n- reduces cognitive load when making design decisions\n- allows quite deployment of new designs via the system's library and preconfigured components\n\n---\n\n## Scope of Design Systems\n- Large companies like Google and Apple have comprehensive design Systems\n- Smaller firms may have less comprehensive or documented systems, or use standards set by other organizations\n\n---\n\n## Design Systems for Developers\n\n- A design system is very useful for creating mockups and prototypes quickly and consistently.\n- A design system is a set of rules regarding visual elements such as: \n- color, typography, spacing, border radius, and pseudo states.            \n\n---\n\n## Components in a Design System\n- Design Systems also include components.\n- These can be accessed from the Figma Community \n- Common Components include:\n- buttons, links and lists\n- cards, gallery items, header layouts\n- and more... (see Material design for an idea of this)\n\n---\n\n## Design System Setup\n\n- [Figma Design System Best Practices](https://www.figma.com/best-practices/components-styles-and-shared-libraries/)\n\n1. Pick colors and generate variations\n2. Pick typography and generate variations\n3. Create a couple simple components to generate:\n   - border-radius\n   - effect styles \n";
const __vite_glob_0_57 = "\n# Figjam Introduction\n  \nA tool for planning\n\n---\n\n### What is Figjam\n- Figjam is an online whiteboarding tool\n- It's used for brainstorming, visually mapping, and exploring ideas\n- Tools like this are especially used by UX designers            \n\n---\n\n### Why Figjam?\n- We are using it because it's bundled neatly with Figma\n- It's easy to share info with team members and clients\n- It can be used to make presentation slides\n\n---\n\n### Top 3 Uses for Figjam\n- Brainstorm\n  - Exploring ideas\n  - Expanding\n- Flowchart\n  - Focusing Ideas\n  - Contracting\n- Agenda\n  - Planning Ideas\n  - Organizing\n\n---\n\n## Essential Tools in Figjam\n1. Section\n    - Used to organize your content\n2. Shapes\n    - Used to create items of content\n    - Link items to one another\n3. Sticky Notes\n    - Likes shapes but more text focused\n4. Text Tool\n5. Connector Tool\n\n";
const __vite_glob_0_58 = "\n# Figma and SVG Editing\n\nVector Image Editing\n  \n---\n\n## 1. Figma Overview\n\n- Vector editng involves manipulating paths and objects\n- Figma's design tools are great for simple logos and page mockups\n- Examples of vectors are: non-raster lines, polygons etc\n- Vector images do not distort at different resolutions\n---\n\n## 2. What to expect from Figma\n\n- Figma is a UX focused design tool that specializes in vector Editing\n- It has less features than Inkscape or Adobe Illustrator because it's meant for basic shape manipulations\n  - Use Inkscape or Illustrator for advanced svg and vector editing work\n  - Use Gimp or Adobe Photoshop for raster image editing work (rasters are images like pictures)\n- Figma is similar to Penpot or Adobe XD. They all have less path manipulation tools but feature prototyping and UI design focused tools\n  \n---\n\n## 3. Figma UI Sections\n\n- Pages: Separate pages for content\n- Assets: Content shared between pages\n- Layers: Groups of content on pages\n\n---\n\n### Details\n\n- Right side of the UI has all the details and specifics of each tool\n  - color, alignment, object layers, fonts...\n- Also access your defaults here when you make them\n- Export can be found at the bottom of the right panel\n\n---\n\n## 4. Figma Shapes\n\n\n- ellipses\n- squares\n- lines\n- text\n\n";
const __vite_glob_0_59 = "\n# Mockups\n\nMockups are medium to high fidelity visual of your site/app\n\n---\n\n## What are Mockups?\n- The next logical step after wireframing\n- **A depiction of what a site/app is intended to look like**\n- A design system, images, placeholder, draft, or final copy text\n- Easily editable working representations of a site\n\n---\n\n## Who are Mockups for?\n- Clients \n  - to show what their site will look like and get feedback\n- User Testing\n  - prototypes and even still mockups can be tested with users to understand how they interact with the layout and content\n- Developers\n  - visual representations of what they are building\n\n---\n\n## Important Points\n- Use a column grid for your layout (4-5 for mobile and 12 for desktop)\n- Set up a design system of colors and fonts early in your process\n- Label and group things as you go \n- Use components as much as you can\n- Use plugins that work with your process\n\n";
const __vite_glob_0_60 = '\n# Slideshow Title\n\n---\n\n### Slide Title\nLorem ipsum dolor, sit amet consectetur adipisicing elit. Sunt, maiores.\n1.\n2.\n3.\n\n---\n\n### Example Searches\nHow would you rate the following search phrases?\n- Were any words specific to the industry of web development? What are they?\n- How many words are used?\n- What is the skill level of the searcher? What problem might they be solving?\n- How would do you identify high quality results?\n\n---\n\n## "`How do I build a web site?`"\n- Could be better.\n- It\'s not domain-specific.\n- It\'s kind of long.\n- Skill level: probably beginner\n\n---\n\n## "`Why isn\'t my CSS doing anything?`"\n- One star.\n- Probably too long.\n- There\'s no way for Google to answer the question, but it seems to anyway?\n\n\n---\n\n## "`web development`"\n- Not very domain-specific\n- Not qualified; there are a lot reasons why someone would use this phrase \n\n---\n\n## "`html crash course`"\n- Pretty good\n- Domain specific and qualified\n- Skill level: beginner\n\n---\n\n## "`css patterns`"\n- "pattern" is one of Tony\'s favourite words to append to a phrase for nerdy results.\n\n---\n\n## "`[your fave browser] devtools`"\n- The term "devtools" is (mostly) only used by frontend developers (domain-specific)\n\n---\n\n## "`most underrated css properties`"\n- The "css" in "css properties" makes "properties" waaaaay more domain-specific\n\n---\n\n## Identifying high quality results\nLook for search results that:\n- Fit your learning style\n- Solve your problem\n- Have imagery and high visual hierarchy\n- Are current\n- Come from a trusted source\n\n---\n\n## Convergent vs Divergent Searching\n- **Convergent**: \n    - There is probably one answer to your problem\n    - Example: copy/pasting an error\n- **Divergent**: \n    - There could be many answers to your problem\n    - You don\'t have a problem\n    - Example: finding an alternative to Codepen using Google Suggestions\n\n---\n\n## "`codepen vs`"\n- Wait for Google to show completion suggestions\n- What other alternatives can you find using a similar "verses search"?\n';
const __vite_glob_0_61 = `

# Usability
How we make information easy to access

---

### Terminology

- Usability : A quality attribute that assesses how easy user interfaces are to use. The word "usability" also refers to methods for improving ease-of-use during the design process.
- Information Hierarchy : A discipline that focuses on organizing, structuring, and labeling content in an effective and sustainable way.
- Satisfice : When a user chooses the first reasonable option instead of the best option.
- Interaction Cost : The sum of efforts — mental and physical — that the users must deploy in interacting with a site in order to reach their goals.

---           

### Satisficing

Unless faced with life-changing information, most site visitors won't read all of the content provided but settle for a “good-enough” answer. Better sorting and clearer writing satisfy users without exhausting the limited time they’re willing to spend on a website.

---

#### How we surf the web

1. We don't read pages. we scan them.

- [Text Scanning Patterns: Eyetracking Evidence](https://www.nngroup.com/articles/text-scanning-patterns-eyetracking/)

2. We don't make optimal choices. We satisfice.
    [Satisficing](https://www.nngroup.com/articles/satisficing/)
3. We don't figure out how things work. We muddle through.
    [Information foraging](https://www.nngroup.com/articles/information-foraging/)
    _Source: Don't Make Me Think by Steve Krug_

---

### Usable sites/apps minimize Interaction Cost

Throughout this program we will be making design decisions that will (hopefully) maximize the usability of our websites and applications by minimizing interaction costs for the user. We do this by **_*minimizing*_**:

---

#### Reading
  - [Inverted Pyramid: Writing for Comprehension](https://www.nngroup.com/articles/inverted-pyramid/)
  - [Plain Language Is for Everyone, Even Experts](https://www.nngroup.com/articles/plain-language-experts/)

---

#### Scrolling
  - [Scrolling and Attention](https://www.nngroup.com/articles/scrolling-and-attention/)
  - Video: [The Fold Manifesto: How to Encourage Scrolling](https://www.nngroup.com/videos/fold-manifesto/)

---

#### Looking around in order to find relevant information
  - [Information foraging](https://www.nngroup.com/articles/information-foraging/)

---

#### Comprehending information presented to you
  - [Don't use "Read more", "Get started"...](https://www.nngroup.com/articles/get-started/)

---

#### Clicking or touching (without making mistakes)
  - [Making Clickable Elements Recognizable](https://www.nngroup.com/articles/clickable-elements/)

---

#### Typing
  - [Website Forms Usability: Top 10 Recommendations](https://www.nngroup.com/articles/web-form-design/)

---

#### Page loads and waiting times
  - [The Need for Speed, 23 Years Later](https://www.nngroup.com/articles/the-need-for-speed/)

---

#### Attention switches
  - [Attention Economy](https://www.nngroup.com/articles/attention-economy/)

---

#### Memory load
— the information that users must remember in order to complete their task.
  - Video: [The Magical Number 7 and UX](https://www.nngroup.com/videos/magical-number-7-ux/)
  - [How Chunking Helps Content Processing](https://www.nngroup.com/articles/chunking/) 

`;
const __vite_glob_0_62 = "\n# Design Principles\n\n---\n\n## Video: [Design Principles - Visual Hierarchy](https://www.youtube.com/watch?v=qZWDJqY27bw) The Freelancers Journey\n- Put yourself in the shoes of your client's client\n- Overly complex and cluttered designs are hard to get information from\n  - Avoid letting information compete for prominance\n\n---\n\n## Video: [Design Principles - Repetition](https://www.youtube.com/watch?v=8zhhc5pzE9Y) - The Freelancers Journey\n- Use repeating patterns, sizes, and shapes to communicate meaning, set expectations, and create a pattern which can be **strategically broken**\n\n---\n\n## Video: [Design Principles: Grid Spacing and Alignment](https://www.youtube.com/watch?v=9QRIjnMEXw8)\n- Grids are commonly used in design to organize content\n- If content isn't balanced in sized, a traditional grid might not be the best way to organize content\n\n---\n\n## Video: [Design Principles - Space](https://www.youtube.com/watch?v=3dESVj7-XzI)\n- Empty space is used to:\n1. create rhythm\n2. establish relationships between content\n3. give elements the ability to breathe\n\n---\n\n## Video: [Design Principles - Typography](https://www.youtube.com/watch?v=yom0nogFN3k)\n- Display and Text typefaces\n- Typography makes a statement and creates identity\n";
const __vite_glob_0_63 = "\n# Wireframes, User Flows, Mockups\n---\n\n## Mockups and Wireframes\n\n- Mockups show a medium to high resolution of what the website or app will look like.\n- Wireframes are the skeletons of mockups\n  - they are low resolution and communicate the essential layout and usability elements\n\n---\n\n## How to use wireframes and mockups together\n\n- Test ideas with wireframing, and when you've worked out the bugs, begin the mockup process\n  - This workflow allows you to create quickly and not get hung up on irrelevant details at any given point of your design process\n  - Reworking a wireframe takes very little effort compared to a high res mockup, or a completed site or app.\n\n---\n\n## Common types of Wireframing\n\n- User Flows: Document the steps a user will work through with cards (not a wireframe in the traditional sense, but these are a useful step in the wireframe process)\n- UI Wireframe: Map out the page content with basic shapes and labels\n\n---\n\n## User Flows\n\n- Useful get into the mind of the user\n  - Map out steps from the user's perspective)\n- Also useful for reducing a site down to it's core functionality to find issues with the design\n  - Can be doing prior to design or as a review of a site to determine where usability bugs lie\n\n---\n\n## Low Fidelity Wireframes\n\n- Pen and Paper sketch\n- Using basic shapes in figma\n- Plan out a design\n- [View Examples Here](https://mentormate.com/blog/low-fidelity-wireframes-vs-high-fidelity-wireframes/)\n";
const mdImports = Object.entries(/* @__PURE__ */ Object.assign({ "../content/slides/cpnt-200/authentication-authorization.md": __vite_glob_0_0, "../content/slides/cpnt-200/http-rest.md": __vite_glob_0_1, "../content/slides/cpnt-200/relational-db-sql.md": __vite_glob_0_2, "../content/slides/cpnt-200/side-gigs.md": __vite_glob_0_3, "../content/slides/cpnt-200/strapi-content-types.md": __vite_glob_0_4, "../content/slides/cpnt-200/strapi-deployment.md": __vite_glob_0_5, "../content/slides/cpnt-200/supabase-introduction.md": __vite_glob_0_6, "../content/slides/cpnt-200/sveltekit-loading-data.md": __vite_glob_0_7, "../content/slides/cpnt-201/branches-prs.md": __vite_glob_0_8, "../content/slides/cpnt-201/building-better-search-phrases.md": __vite_glob_0_9, "../content/slides/cpnt-201/git-collaboration.md": __vite_glob_0_10, "../content/slides/cpnt-201/git-github.md": __vite_glob_0_11, "../content/slides/cpnt-201/markdown.md": __vite_glob_0_12, "../content/slides/cpnt-201/npm.md": __vite_glob_0_13, "../content/slides/cpnt-201/project-board.md": __vite_glob_0_14, "../content/slides/cpnt-201/urls-file-paths.md": __vite_glob_0_15, "../content/slides/cpnt-260/better-search-phrases.md": __vite_glob_0_16, "../content/slides/cpnt-260/browser-triad.md": __vite_glob_0_17, "../content/slides/cpnt-260/colour.md": __vite_glob_0_18, "../content/slides/cpnt-260/css-cascade.md": __vite_glob_0_19, "../content/slides/cpnt-260/css-introduction.md": __vite_glob_0_20, "../content/slides/cpnt-260/flexbox-intermediate.md": __vite_glob_0_21, "../content/slides/cpnt-260/flexbox-nav.md": __vite_glob_0_22, "../content/slides/cpnt-260/hero-sections.md": __vite_glob_0_23, "../content/slides/cpnt-260/html-images.md": __vite_glob_0_24, "../content/slides/cpnt-260/http-introduction.md": __vite_glob_0_25, "../content/slides/cpnt-260/responsive-banners.md": __vite_glob_0_26, "../content/slides/cpnt-260/ui-triad-quiz.md": __vite_glob_0_27, "../content/slides/cpnt-260/web-typography.md": __vite_glob_0_28, "../content/slides/cpnt-262/http-rest.md": __vite_glob_0_29, "../content/slides/cpnt-262/js-arrays.md": __vite_glob_0_30, "../content/slides/cpnt-262/js-async.md": __vite_glob_0_31, "../content/slides/cpnt-262/js-callbacks-events.md": __vite_glob_0_32, "../content/slides/cpnt-262/js-changing-css.md": __vite_glob_0_33, "../content/slides/cpnt-262/js-conditional-code.md": __vite_glob_0_34, "../content/slides/cpnt-262/js-errors.md": __vite_glob_0_35, "../content/slides/cpnt-262/js-exceptions.md": __vite_glob_0_36, "../content/slides/cpnt-262/js-expressions-vs-statements.md": __vite_glob_0_37, "../content/slides/cpnt-262/js-flowcharts.md": __vite_glob_0_38, "../content/slides/cpnt-262/js-for-loops.md": __vite_glob_0_39, "../content/slides/cpnt-262/js-forms.md": __vite_glob_0_40, "../content/slides/cpnt-262/js-functions.md": __vite_glob_0_41, "../content/slides/cpnt-262/js-higher-order-array-methods.md": __vite_glob_0_42, "../content/slides/cpnt-262/js-introduction.md": __vite_glob_0_43, "../content/slides/cpnt-262/js-numbers-math.md": __vite_glob_0_44, "../content/slides/cpnt-262/js-object-methods.md": __vite_glob_0_45, "../content/slides/cpnt-262/js-strings.md": __vite_glob_0_46, "../content/slides/cpnt-262/js-useful-objects.md": __vite_glob_0_47, "../content/slides/cpnt-262/js-value-validation.md": __vite_glob_0_48, "../content/slides/cpnt-262/js-variables.md": __vite_glob_0_49, "../content/slides/cpnt-262/svelte-events.md": __vite_glob_0_50, "../content/slides/cpnt-262/sveltekit-introduction.md": __vite_glob_0_51, "../content/slides/cpnt-265/contracting.md": __vite_glob_0_52, "../content/slides/cpnt-265/finals-checklist.md": __vite_glob_0_53, "../content/slides/dsgn-270/better-search-phrases.md": __vite_glob_0_54, "../content/slides/dsgn-270/booleans.md": __vite_glob_0_55, "../content/slides/dsgn-270/design-system.md": __vite_glob_0_56, "../content/slides/dsgn-270/figjam.md": __vite_glob_0_57, "../content/slides/dsgn-270/figma.md": __vite_glob_0_58, "../content/slides/dsgn-270/mockups.md": __vite_glob_0_59, "../content/slides/dsgn-270/template.md": __vite_glob_0_60, "../content/slides/dsgn-270/usability.md": __vite_glob_0_61, "../content/slides/dsgn-270/visual-hierarchy.md": __vite_glob_0_62, "../content/slides/dsgn-270/wireframes.md": __vite_glob_0_63 }));
const deckObj = {};
mdImports.forEach(([path, module]) => {
  const pathArray = path.split("/");
  const fileName = pathArray.pop().replace(".md", "");
  const category = pathArray.pop();
  if (!deckObj[`${category}/${fileName}`]) {
    deckObj[`${category}/${fileName}`] = [category, module, "md"];
  }
});
const decks = deckObj;
const ssr = false;
async function load({ params }) {
  let content = {};
  if (decks.hasOwnProperty(`${params.category}/${params.slug}`)) {
    content.path = decks[`${params.category}/${params.slug}`][0];
    content.module = decks[`${params.category}/${params.slug}`][1];
    content.type = decks[`${params.category}/${params.slug}`][2];
  } else {
    throw error(404, "Slide deck not found");
  }
  return {
    path: content?.path,
    module: content?.module,
    type: content?.type
  };
}
export {
  load,
  ssr
};
